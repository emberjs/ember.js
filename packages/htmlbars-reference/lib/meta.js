import { dict, DictSet } from './utils';
import { PropertyReference } from './references/descriptors';
import RootReference from './references/root';
class Meta {
    constructor(object) {
        this._object = object;
        this._references = null;
        this._root = null;
        this._referenceTypes = null;
    }
    static for(obj) {
        if (obj._meta)
            return obj._meta;
        let MetaToUse = obj.constructor._Meta || Meta;
        return (obj._meta = new MetaToUse(obj));
    }
    addReference(property, reference) {
        var refs = this._references = this._references || dict();
        var set = refs[property] = refs[property] || new DictSet();
        set.add(reference);
    }
    addReferenceTypeFor(property, type) {
        this._referenceTypes = this._referenceTypes || dict();
        this._referenceTypes[property] = type;
    }
    referenceTypeFor(property) {
        if (!this._referenceTypes)
            return PropertyReference;
        return this._referenceTypes[property] || PropertyReference;
    }
    removeReference(property, reference) {
        if (!this._references)
            return;
        var set = this._references[property];
        set.remove(reference);
    }
    referencesFor(property) {
        if (!this._references)
            return;
        return this._references[property];
    }
    root() {
        return (this._root = this._root || new RootReference(this._object));
    }
}
export default Meta;
class SealedMeta extends Meta {
    addReferenceTypeFor(...args) {
        throw new Error("Cannot modify reference types on a sealed meta");
    }
}
class BlankMeta extends SealedMeta {
    referenceTypeFor(...args) {
        return PropertyReference;
    }
}
export class MetaBuilder {
    constructor() {
        this._referenceTypes = null;
    }
    addReferenceTypeFor(property, type) {
        this._referenceTypes = this._referenceTypes || dict();
        this._referenceTypes[property] = type;
    }
    seal() {
        if (!this._referenceTypes)
            return BlankMeta;
        return buildMeta(turbocharge(this._referenceTypes));
    }
}
function buildMeta(_referenceTypes) {
    return class class_1 extends SealedMeta {
        constructor(object, RootReference, PropertyReference) {
            super(object, RootReference, PropertyReference);
            this._referenceTypes = _referenceTypes;
        }
        referenceTypeFor(property) {
            return this._referenceTypes[property] || PropertyReference;
        }
    }
    ;
}
function turbocharge(obj) {
    function Dummy() { }
    Dummy.prototype = obj;
    return obj;
}
export function metaFor(obj) {
    return Meta.for(obj);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9odG1sYmFycy1yZWZlcmVuY2UvbGliL21ldGEudHMiXSwibmFtZXMiOlsiTWV0YSIsIk1ldGEuY29uc3RydWN0b3IiLCJNZXRhLmZvciIsIk1ldGEuYWRkUmVmZXJlbmNlIiwiTWV0YS5hZGRSZWZlcmVuY2VUeXBlRm9yIiwiTWV0YS5yZWZlcmVuY2VUeXBlRm9yIiwiTWV0YS5yZW1vdmVSZWZlcmVuY2UiLCJNZXRhLnJlZmVyZW5jZXNGb3IiLCJNZXRhLnJvb3QiLCJTZWFsZWRNZXRhIiwiU2VhbGVkTWV0YS5hZGRSZWZlcmVuY2VUeXBlRm9yIiwiQmxhbmtNZXRhIiwiQmxhbmtNZXRhLnJlZmVyZW5jZVR5cGVGb3IiLCJNZXRhQnVpbGRlciIsIk1ldGFCdWlsZGVyLmNvbnN0cnVjdG9yIiwiTWV0YUJ1aWxkZXIuYWRkUmVmZXJlbmNlVHlwZUZvciIsIk1ldGFCdWlsZGVyLnNlYWwiLCJidWlsZE1ldGEiLCJidWlsZE1ldGEuY29uc3RydWN0b3IiLCJidWlsZE1ldGEucmVmZXJlbmNlVHlwZUZvciIsInR1cmJvY2hhcmdlIiwidHVyYm9jaGFyZ2UuRHVtbXkiLCJtZXRhRm9yIl0sIm1hcHBpbmdzIjoiT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxTQUFTO09BQ2hDLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEI7T0FDckQsYUFBYSxNQUFNLG1CQUFtQjtBQUU3QztJQVFFQSxZQUFZQSxNQUFNQTtRQUNoQkMsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsTUFBTUEsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBO1FBQ3hCQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUNsQkEsSUFBSUEsQ0FBQ0EsZUFBZUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDOUJBLENBQUNBO0lBWkRELE9BQU9BLEdB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