import { EMPTY_CACHE, DictSet, dict } from '../utils';
import { metaFor } from '../meta';
import ForkedReference from './forked';
import { PropertyReference } from './descriptors';
import PushPullReference from './push-pull';
export class DirectReference extends PushPullReference {
    constructor(parent, property) {
        super();
        this._parent = parent;
        this._property = property;
        this._cache = EMPTY_CACHE;
        this._inner = null;
        this._chains = null;
        this._notifyChildren = null;
    }
    isDirty() { return this._cache === EMPTY_CACHE; }
    value() {
        var _cache = this._cache;
        if (_cache !== EMPTY_CACHE)
            return _cache;
        var _parent = this._parent, _property = this._property;
        var _inner = this._inner;
        if (!_inner) {
            let _parentValue = _parent.value();
            let ReferenceType = metaFor(_parentValue).referenceTypeFor(_property);
            _inner = this._inner = new ReferenceType(_parentValue, _property);
        }
        return _inner.value();
    }
    notify() {
        this._notify();
        super.notify();
    }
    get(prop) {
        var _chains = this._getChains();
        if (prop in _chains)
            return _chains[prop];
        return (_chains[prop] = new IndirectReference(this, prop));
    }
    chain(child) {
        this._getNotifyChildren().add(child);
        return { _parent: this, destroy: function () { this._parent._getNotifyChildren.remove(child); } };
    }
    fork() {
        return new ForkedReference(this);
    }
    label() {
        return '[reference Direct]';
    }
    _notify() {
        this._cache = EMPTY_CACHE;
        var _chains = this._chains, _notifyChildren = this._notifyChildren;
        if (_chains) {
            Object.keys(_chains).forEach(function (key) { _chains[key]._reparent(); });
        }
        if (_notifyChildren) {
            _notifyChildren.forEach(function (child) { child.notify(); });
        }
    }
    _getNotifyChildren() {
        if (this._notifyChildren)
            return this._notifyChildren;
        return (this._notifyChildren = new DictSet());
    }
    _getChains() {
        if (this._chains)
            return this._chains;
        return (this._chains = dict());
    }
}
export class IndirectReference extends DirectReference {
    constructor(parent, property) {
        super(parent, property);
        this._lastParentValue = null;
    }
    value() {
        if (this._cache !== EMPTY_CACHE)
            return this._cache;
        var _lastParentValue = this._lastParentValue, _parentValue = this._parentValue(), _property = this._property;
        if (_parentValue === null || _parentValue === undefined) {
            return (this._cache = undefined);
        }
        var _inner;
        if (_lastParentValue === _parentValue) {
            _inner = this._inner;
        }
        else {
            let ReferenceType = typeof _parentValue === 'object' ? metaFor(_parentValue).referenceTypeFor(_property) : PropertyReference;
            _inner = this._inner = new ReferenceType(_parentValue, _property);
        }
        if (typeof _parentValue === 'object') {
            metaFor(_parentValue).addReference(_property, this);
        }
        return (this._cache = _inner.value());
    }
    label() {
        return '[reference Indirect]';
    }
    _reparent() {
        var _property = this._property, _lastParentValue = this._lastParentValue;
        if (typeof _lastParentValue === 'object' && _lastParentValue !== null) {
            metaFor(_lastParentValue).removeReference(_property, this);
        }
        this._notify();
    }
    _parentValue() {
        var parent = this._parent.value();
        this._lastParentValue = parent;
        return parent;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktYWNjZXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2h0bWxiYXJzLXJlZmVyZW5jZS9saWIvcmVmZXJlbmNlcy9wcm9wZXJ0eS1hY2Nlc3MudHMiXSwibmFtZXMiOlsiRGlyZWN0UmVmZXJlbmNlIiwiRGlyZWN0UmVmZXJlbmNlLmNvbnN0cnVjdG9yIiwiRGlyZWN0UmVmZXJlbmNlLmlzRGlydHkiLCJEaXJlY3RSZWZlcmVuY2UudmFsdWUiLCJEaXJlY3RSZWZlcmVuY2Uubm90aWZ5IiwiRGlyZWN0UmVmZXJlbmNlLmdldCIsIkRpcmVjdFJlZmVyZW5jZS5jaGFpbiIsIkRpcmVjdFJlZmVyZW5jZS5mb3JrIiwiRGlyZWN0UmVmZXJlbmNlLmxhYmVsIiwiRGlyZWN0UmVmZXJlbmNlLl9ub3RpZnkiLCJEaXJlY3RSZWZlcmVuY2UuX2dldE5vdGlmeUNoaWxkcmVuIiwiRGlyZWN0UmVmZXJlbmNlLl9nZXRDaGFpbnMiLCJJbmRpcmVjdFJlZmVyZW5jZSIsIkluZGlyZWN0UmVmZXJlbmNlLmNvbnN0cnVjdG9yIiwiSW5kaXJlY3RSZWZlcmVuY2UudmFsdWUiLCJJbmRpcmVjdFJlZmVyZW5jZS5sYWJlbCIsIkluZGlyZWN0UmVmZXJlbmNlLl9yZXBhcmVudCIsIkluZGlyZWN0UmVmZXJlbmNlLl9wYXJlbnRWYWx1ZSJdLCJtYXBwaW5ncyI6Ik9BQU8sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFVBQVU7T0FDOUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxTQUFTO09BQzFCLGVBQWUsTUFBTSxVQUFVO09BQy9CLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlO09BQzFDLGlCQUFpQixNQUFNLGFBQWE7QUFFM0MscUNBQXFDLGlCQUFpQjtJQUNwREEsWUFBWUEsTUFBTUEsRUFBRUEsUUFBUUE7UUFDMUJDLE9BQU9BLENBQUNBO1FBQ1JBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLE1BQU1B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