import { guid } from '../utils';
class NotifyNode {
    constructor(parent, child) {
        this._parent = parent;
        this._child = child;
    }
    static appendTo(parent, child) {
        let node = new NotifyNode(parent, child);
        let oldTail = parent._notifyTail;
        if (oldTail) {
            oldTail._nextSibling = node;
            node._previousSibling = oldTail;
        }
        else {
            parent._notifyHead = node;
        }
        parent._notifyTail = node;
        return new Unchain(parent, node);
    }
}
class Unchain {
    constructor(parent, notify) {
        this._parent = parent;
        this._notify = notify;
    }
    destroy() {
        let _parent = this._parent, _notify = this._notify;
        let head = _parent._notifyHead;
        let tail = _parent._notifyTail;
        let prev = _notify._previousSibling;
        let next = _notify._nextSibling;
        if (head === _notify)
            _parent._notifyHead = next;
        if (next)
            next._previousSibling = prev;
        if (tail === _notify)
            _parent._notifyTail = prev;
        if (prev)
            prev._nextSibling = next;
    }
}
export default class PushPullReference {
    constructor() {
        this._dirty = true;
        this._notifyHead = null;
        this._notifyTail = null;
        this._sources = null;
        this._guid = guid();
    }
    isDirty() { return this._dirty; }
    chain(child) {
        NotifyNode.append(this, child);
    }
    notify() {
        let notifyNode = this._notifyHead;
        while (notifyNode) {
            notifyNode._child.notify();
            notifyNode = notifyNode._nextSibling;
        }
    }
    destroy() {
        if (!this._sources)
            return;
        this._sources.forEach(source => source.destroy());
    }
    _addSource(source) {
        this._sources = this._sources || [];
        this._sources.push(source.chain(this));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVzaC1wdWxsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2h0bWxiYXJzLXJlZmVyZW5jZS9saWIvcmVmZXJlbmNlcy9wdXNoLXB1bGwudHMiXSwibmFtZXMiOlsiTm90aWZ5Tm9kZSIsIk5vdGlmeU5vZGUuY29uc3RydWN0b3IiLCJOb3RpZnlOb2RlLmFwcGVuZFRvIiwiVW5jaGFpbiIsIlVuY2hhaW4uY29uc3RydWN0b3IiLCJVbmNoYWluLmRlc3Ryb3kiLCJQdXNoUHVsbFJlZmVyZW5jZSIsIlB1c2hQdWxsUmVmZXJlbmNlLmNvbnN0cnVjdG9yIiwiUHVzaFB1bGxSZWZlcmVuY2UuaXNEaXJ0eSIsIlB1c2hQdWxsUmVmZXJlbmNlLmNoYWluIiwiUHVzaFB1bGxSZWZlcmVuY2Uubm90aWZ5IiwiUHVzaFB1bGxSZWZlcmVuY2UuZGVzdHJveSIsIlB1c2hQdWxsUmVmZXJlbmNlLl9hZGRTb3VyY2UiXSwibWFwcGluZ3MiOiJPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sVUFBVTtBQUUvQjtJQUNFQSxZQUFZQSxNQUFNQSxFQUFFQSxLQUFLQTtRQUN2QkMsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsTUFBTUEsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLEtBQUtBLENBQUNBO0lBQ3RCQSxDQUFDQTtJQUVERCxPQUFPQSxRQUFRQSxDQUFDQSxNQUFNQSxFQUFFQSxLQUFLQTtRQUMzQkUsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsVUFBVUEsQ0FBQ0EsTUFBTUEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFFekNBLElBQUlBLE9BQU9BLEdBQUdBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBO1FBQ2pDQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNaQSxPQUFPQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUM1QkEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxH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