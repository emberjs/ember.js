import { compile } from "../htmlbars-compiler/compiler";
import defaultHooks from "../htmlbars-runtime/hooks";
import { merge } from "../htmlbars-util/object-utils";
import DOMHelper from "../dom-helper";
import { equalTokens } from "../htmlbars-test-helpers";
var hooks, helpers, partials, env;
function registerHelper(name, callback) {
    helpers[name] = callback;
}
function commonSetup() {
    hooks = merge({}, defaultHooks);
    hooks.keywords = merge({}, defaultHooks.keywords);
    helpers = {};
    partials = {};
    env = {
        dom: new DOMHelper(),
        hooks: hooks,
        helpers: helpers,
        partials: partials,
        useFragmentCache: true
    };
    registerHelper('each', function (params) {
        var list = params[0];
        for (var i = 0, l = list.length; i < l; i++) {
            var item = list[i];
            if (this.arity > 0) {
                this.yieldItem(item.key, [item]);
            }
        }
    });
}
QUnit.module("Diffing", {
    beforeEach: commonSetup
});
test("Morph order is preserved when rerendering with duplicate keys", function () {
    var template = compile(`<ul>{{#each items as |item|}}<li>{{item.name}}</li>{{/each}}</ul>`);
    let a1 = { key: "a", name: "A1" };
    let a2 = { key: "a", name: "A2" };
    let b1 = { key: "b", name: "B1" };
    let b2 = { key: "b", name: "B2" };
    var result = template.render({ items: [a1, a2, b1, b2] }, env);
    equalTokens(result.fragment, `<ul><li>A1</li><li>A2</li><li>B1</li><li>B2</li></ul>`);
    let morph = result.nodes[0].morphList.firstChildMorph;
    morph.state.initialName = 'A1';
    morph.nextMorph.state.initialName = 'A2';
    morph.nextMorph.nextMorph.state.initialName = 'B1';
    morph.nextMorph.nextMorph.nextMorph.state.initialName = 'B2';
    function getNames() {
        let names = [];
        let morph = result.nodes[0].morphList.firstChildMorph;
        while (morph) {
            names.push(morph.state.initialName);
            morph = morph.nextMorph;
        }
        return names;
    }
    result.rerender(env, { items: [a1, b2, b1, a2] });
    equalTokens(result.fragment, `<ul><li>A1</li><li>B2</li><li>B1</li><li>A2</li></ul>`);
    deepEqual(getNames(), ['A1', 'B1', 'B2', 'A2']);
    result.rerender(env, { items: [b1, a2] });
    equalTokens(result.fragment, `<ul><li>B1</li><li>A2</li></ul>`);
    deepEqual(getNames(), ['B1', 'A1']);
});
test("duplicate keys are allowed when duplicate is last morph", function () {
    var template = compile(`<ul>{{#each items as |item|}}<li>{{item.name}}</li>{{/each}}</ul>`);
    let a1 = { key: "a", name: "A1" };
    let a2 = { key: "a", name: "A2" };
    var result = template.render({ items: [] }, env);
    result.rerender(env, { items: [a1] });
    equalTokens(result.fragment, `<ul><li>A1</li></ul>`);
    result.rerender(env, { items: [a1, a2] });
    equalTokens(result.fragment, `<ul><li>A1</li><li>A2</li></ul>`);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlmZmluZy10ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2h0bWxiYXJzLWNvbXBpbGVyL3Rlc3RzL2RpZmZpbmctdGVzdC50cyJdLCJuYW1lcyI6WyJyZWdpc3RlckhlbHBlciIsImNvbW1vblNldHVwIiwiZ2V0TmFtZXMiXSwibWFwcGluZ3MiOiJPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sK0JBQStCO09BQ2hELFlBQVksTUFBTSwyQkFBMkI7T0FDN0MsRUFBRSxLQUFLLEVBQUUsTUFBTSwrQkFBK0I7T0FDOUMsU0FBUyxNQUFNLGVBQWU7T0FDOUIsRUFBRSxXQUFXLEVBQUUsTUFBTSwwQkFBMEI7QUFFdEQsSUFBSSxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxHQUFHLENBQUM7QUFFbEMsd0JBQXdCLElBQUksRUFBRSxRQUFRO0lBQ3BDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxRQUFRQSxDQUFDQTtBQUMzQkEsQ0FBQ0E7QUFFRDtJQUNFQyxLQUFLQSxHQUFHQSxLQUFLQSxDQUFDQSxFQUFFQSxFQUFFQSxZQUFZQSxDQUFDQSxDQUFDQTtJQUNoQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsR0FBR0EsS0FBS0EsQ0FBQ0EsRUFBRUEsRUFBRUEsWUFBWUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7SUFDbERBLE9BQU9BLEdBQUdBLEVBQUVBLENBQUNBO0lBQ2JBLFFBQVFBLEdBQUdBLEVBQUVBLENBQUNBO0lBRWRBLEdBQUdBLEdBQUdBO1FBQ0pBLEdBQUdBLEVBQUVBLElBQUlBLFNBQVNBLEVBQUVBO1FBQ3BCQSxLQUFLQSxFQUFFQSxLQUFLQTtRQUNaQSxPQUFPQSxFQUFFQSxPQUFPQTtRQUNoQkEsUUFBUUEsRUFBRUEsUUFBUUE7UUFDbEJBLGdCQUFnQkEsRUFBRUEsSUFBSUE7S0FDdkJBLENBQUNBO0lBRUZBLGNBQWNBLENBQUNBLE1BQU1BLEVBQUVBLFVBQVNBLE1BQU1BO1FBQ3BDLElBQUks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REFBdUQsQ0FBQyxDQUFDO0lBQ3RGLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFaEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLGlDQUFpQyxDQUFDLENBQUM7SUFDaEUsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDdEMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMseURBQXlELEVBQUU7SUFDOUQsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLG1FQUFtRSxDQUFDLENBQUM7SUFFNUYsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUNsQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO0lBRWxDLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFbEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBRSxFQUFFLENBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUVyRCxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztBQUNsRSxDQUFDLENBQUMsQ0FBQyJ9