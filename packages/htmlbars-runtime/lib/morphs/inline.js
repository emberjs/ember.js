import { symbol } from "htmlbars-util";
import { HelperInvocationReference } from '../reference';
import { HtmlInsertion, TextInsertion, NodeInsertion, EmptyInsertion, RegionMorph } from "./region";
const SAFE_BRAND = symbol("safe string");
export class ValueMorph extends RegionMorph {
    init({ ref: syntax, trustingMorph }) {
        super.init();
        this._lastResult = null;
        this._ref = syntax.evaluate(this._frame);
        this._InsertionType = trustingMorph ? HtmlInsertion : TextInsertion;
    }
    render() {
        let value = this._lastValue = this._ref.value();
        this._region.replace(new this._InsertionType(value));
    }
}
export class HelperMorph extends RegionMorph {
    init({ path, params, trustingMorph }) {
        super.init();
        let { _frame } = this;
        let helper = this._frame.lookupHelper(path);
        this._helper = HelperInvocationReference.fromStatements({ helper, params, frame: _frame });
        this._trustingMorph = trustingMorph;
    }
    render() {
        let { _region, _helper, _trustingMorph } = this;
        _region.replace(insertionForUserContent(_helper.value(), _trustingMorph));
    }
}
// helpers
function insertionForUserContent(content, trustingMorph) {
    switch (typeof content) {
        case 'string':
            return insertionForText(content, trustingMorph);
        case 'object':
            if (content[SAFE_BRAND]) {
                return new HtmlInsertion(content);
            }
            if (content.nodeType) {
                return new NodeInsertion(content);
            }
        /* falls through */
        default:
            throw new Error(`Helpers must return strings or safe strings, not ${content}`);
    }
}
function insertionForText(text, trustingMorph) {
    if (text === '') {
        return new EmptyInsertion();
    }
    return trustingMorph ? new HtmlInsertion(text) : new TextInsertion(text);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2h0bWxiYXJzLXJ1bnRpbWUvbGliL21vcnBocy9pbmxpbmUudHMiXSwibmFtZXMiOlsiVmFsdWVNb3JwaCIsIlZhbHVlTW9ycGguaW5pdCIsIlZhbHVlTW9ycGgucmVuZGVyIiwiSGVscGVyTW9ycGgiLCJIZWxwZXJNb3JwaC5pbml0IiwiSGVscGVyTW9ycGgucmVuZGVyIiwiaW5zZXJ0aW9uRm9yVXNlckNvbnRlbnQiLCJpbnNlcnRpb25Gb3JUZXh0Il0sIm1hcHBpbmdzIjoiT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWU7T0FDL0IsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGNBQWM7T0FFakQsRUFDTCxhQUFhLEVBQ2IsYUFBYSxFQUNiLGFBQWEsRUFDYixjQUFjLEVBQ2QsV0FBVyxFQUNaLE1BQU0sVUFBVTtBQUVqQixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7QUFFekMsZ0NBQWdDLFdBQVc7SUFDekNBLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLE1BQU1BLEVBQUVBLGFBQWFBLEVBQUVBO1FBQ2pDQyxLQUFLQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtRQUNiQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDekNBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLGFBQWFBLEdBQUdBLGFBQWFBLEdBQUdBLGFBQWFBLENBQUNBO0lBQ3RFQSxDQUFDQTtJQUVERCxNQUFNQTtRQUNKRSxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUNoREEs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