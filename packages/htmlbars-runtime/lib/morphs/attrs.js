import { getAttrNamespace } from "htmlbars-util";
import { Morph } from "../morph";
export class AttrMorph extends Morph {
    static specialize({ name, value, namespace }) {
        namespace = namespace || getAttrNamespace(name);
        return namespace ? SetAttributeNSMorph : SetAttributeMorph;
    }
    init({ name, value: syntax }) {
        this._name = name;
        this._value = syntax.evaluate(this._frame);
        this._lastValue = false;
        this.isDynamic = true;
    }
    _setLastValue(value) {
        // we should probably disallow certain kinds of values here if we can
        // get away with it.
        if (value === null || value === undefined || value === false) {
            this._lastValue = false;
            return false;
        }
        else {
            this._lastValue = value;
            return value;
        }
    }
}
class SetAttributeMorph extends AttrMorph {
    append() {
        let contentValue = this._setLastValue(this._value.value());
        atomicSetAttribute(this._frame, this.parentNode, this._name, contentValue);
    }
}
class SetAttributeNSMorph extends AttrMorph {
    init(attrs) {
        super(attrs);
        this._namespace = attrs.namespace;
    }
    append() {
        let contentValue = this._setLastValue(this._value.value());
        atomicSetAttributeNS(this._frame, this.parentNode, this._name, this._namespace, contentValue);
    }
}
export class SetPropertyMorph extends AttrMorph {
    append() {
        let contentValue = this._setLastValue(this._value.value());
        this.parentNode[this._name] = contentValue;
    }
}
// helpers
function atomicSetAttribute(frame, element, name, value) {
    if (value === false) {
        frame.dom().removeAttribute(element, name);
    }
    else {
        frame.dom().setAttribute(element, name, value);
    }
}
function atomicSetAttributeNS({ env: { dom } }, element, name, namespace, value) {
    if (value === false) {
        dom.removeAttribute(element, name);
    }
    else {
        dom.setAttributeNS(element, name, namespace, value);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaHRtbGJhcnMtcnVudGltZS9saWIvbW9ycGhzL2F0dHJzLnRzIl0sIm5hbWVzIjpbIkF0dHJNb3JwaCIsIkF0dHJNb3JwaC5zcGVjaWFsaXplIiwiQXR0ck1vcnBoLmluaXQiLCJBdHRyTW9ycGguX3NldExhc3RWYWx1ZSIsIlNldEF0dHJpYnV0ZU1vcnBoIiwiU2V0QXR0cmlidXRlTW9ycGguYXBwZW5kIiwiU2V0QXR0cmlidXRlTlNNb3JwaCIsIlNldEF0dHJpYnV0ZU5TTW9ycGguaW5pdCIsIlNldEF0dHJpYnV0ZU5TTW9ycGguYXBwZW5kIiwiU2V0UHJvcGVydHlNb3JwaCIsIlNldFByb3BlcnR5TW9ycGguYXBwZW5kIiwiYXRvbWljU2V0QXR0cmlidXRlIiwiYXRvbWljU2V0QXR0cmlidXRlTlMiXSwibWFwcGluZ3MiOiJPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlO09BQ3pDLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVTtBQUVoQywrQkFBK0IsS0FBSztJQUNsQ0EsT0FBT0EsVUFBVUEsQ0FBQ0EsRUFBRUEsSUFBSUEsRUFBRUEsS0FBS0EsRUFBRUEsU0FBU0EsRUFBRUE7UUFDMUNDLFNBQVNBLEdBQUdBLFNBQVNBLElBQUlBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDaERBLE1BQU1BLENBQUNBLFNBQVNBLEdBQUdBLG1CQUFtQkEsR0FBR0EsaUJBQWlCQSxDQUFDQTtJQUM3REEsQ0FBQ0E7SUFFREQsSUFBSUEsQ0FBQ0EsRUFBRUEsSUFBSUEsRUFBRUEsS0FBS0EsRUFBRUEsTUFBTUEsRUFBRUE7UUFDMUJFLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBO1FBQ2xCQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtR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