import { tokenize } from "simple-html-tokenizer";
import { forEach } from "htmlbars-util";
export function equalInnerHTML(fragment, html) {
    var actualHTML = normalizeInnerHTML(fragment.innerHTML);
    QUnit.push(actualHTML === html, actualHTML, html);
}
export function equalHTML(node, html) {
    var fragment;
    if (!node.nodeType && node.length) {
        fragment = document.createDocumentFragment();
        while (node[0]) {
            fragment.appendChild(node[0]);
        }
    }
    else {
        fragment = node;
    }
    var div = document.createElement("div");
    div.appendChild(fragment.cloneNode(true));
    equalInnerHTML(div, html);
}
function generateTokens(divOrHTML) {
    var div;
    if (typeof divOrHTML === 'string') {
        div = document.createElement("div");
        div.innerHTML = divOrHTML;
    }
    else {
        div = divOrHTML;
    }
    return { tokens: tokenize(div.innerHTML), html: div.innerHTML };
}
export function equalTokens(fragment, html, message) {
    if (fragment.fragment) {
        fragment = fragment.fragment;
    }
    if (html.fragment) {
        html = html.fragment;
    }
    var fragTokens = generateTokens(fragment);
    var htmlTokens = generateTokens(html);
    function normalizeTokens(token) {
        if (token.type === 'StartTag') {
            token.attributes = token.attributes.sort(function (a, b) {
                if (a[0] > b[0]) {
                    return 1;
                }
                if (a[0] < b[0]) {
                    return -1;
                }
                return 0;
            });
        }
    }
    forEach(fragTokens.tokens, normalizeTokens);
    forEach(htmlTokens.tokens, normalizeTokens);
    var msg = "Expected: " + htmlTokens.html + "; Actual: " + fragTokens.html;
    if (message) {
        msg += " (" + message + ")";
    }
    deepEqual(fragTokens.tokens, htmlTokens.tokens, msg);
}
// detect side-effects of cloning svg elements in IE9-11
var ieSVGInnerHTML = (function () {
    if (!document.createElementNS) {
        return false;
    }
    var div = document.createElement('div');
    var node = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    div.appendChild(node);
    var clone = div.cloneNode(true);
    return clone.innerHTML === '<svg xmlns="http://www.w3.org/2000/svg" />';
})();
export function normalizeInnerHTML(actualHTML) {
    if (ieSVGInnerHTML) {
        // Replace `<svg xmlns="http://www.w3.org/2000/svg" height="50%" />` with `<svg height="50%"></svg>`, etc.
        // drop namespace attribute
        actualHTML = actualHTML.replace(/ xmlns="[^"]+"/, '');
        // replace self-closing elements
        actualHTML = actualHTML.replace(/<([^ >]+) [^\/>]*\/>/gi, function (tag, tagName) {
            return tag.slice(0, tag.length - 3) + '></' + tagName + '>';
        });
    }
    return actualHTML;
}
// detect weird IE8 checked element string
var checkedInput = document.createElement('input');
checkedInput.setAttribute('checked', 'checked');
var checkedInputString = checkedInput.outerHTML;
export function isCheckedInputHTML(element) {
    equal(element.outerHTML, checkedInputString);
}
// check which property has the node's text content
var textProperty = document.createElement('div').textContent === undefined ? 'innerText' : 'textContent';
export function getTextContent(el) {
    // textNode
    if (el.nodeType === 3) {
        return el.nodeValue;
    }
    else {
        return el[textProperty];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9odG1sYmFycy10ZXN0LWhlbHBlcnMvbGliL2hlbHBlcnMudHMiXSwibmFtZXMiOlsiZXF1YWxJbm5lckhUTUwiLCJlcXVhbEhUTUwiLCJnZW5lcmF0ZVRva2VucyIsImVxdWFsVG9rZW5zIiwiZXF1YWxUb2tlbnMubm9ybWFsaXplVG9rZW5zIiwibm9ybWFsaXplSW5uZXJIVE1MIiwiaXNDaGVja2VkSW5wdXRIVE1MIiwiZ2V0VGV4dENvbnRlbnQiXSwibWFwcGluZ3MiOiJPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCO09BQ3pDLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZTtBQUV2QywrQkFBK0IsUUFBUSxFQUFFLElBQUk7SUFDM0NBLElBQUlBLFVBQVVBLEdBQUdBLGtCQUFrQkEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7SUFDeERBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLEtBQUtBLElBQUlBLEVBQUVBLFVBQVVBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO0FBQ3BEQSxDQUFDQTtBQUVELDBCQUEwQixJQUFJLEVBQUUsSUFBSTtJQUNsQ0MsSUFBSUEsUUFBUUEsQ0FBQ0E7SUFDYkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsSUFBSUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDbENBLFFBQVFBLEdBQUdBLFFBQVFBLENBQUNBLHNCQUFzQkEsRUFBRUEsQ0FBQ0E7UUFDN0NBLE9BQU9BLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBO1lBQ2ZBLFFBQVFBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ2hDQSxDQUFDQTtJQUNIQSxDQUFDQTtJQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtR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