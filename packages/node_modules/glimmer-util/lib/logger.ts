export enum LogLevel {
  Trace,
  Debug,
  Warn,
  Error
}

export class Logger {
  public level: LogLevel;
  public f = ALWAYS;
  public force = ALWAYS;

  constructor({ level }: { level: LogLevel }) {
    this.level = level;
  }

  private skipped(level: LogLevel, force = false): boolean {
    if (force) return false;
    return level < this.level;
  }

  trace(message?: any, { stackTrace = false, force = false } = {}) {
    if (this.skipped(LogLevel.Trace, force)) return;
    console.log(message);
    if (stackTrace) console.trace();
  }

  debug(message: any, { stackTrace = false, force = false } = {}) {
    if (this.skipped(LogLevel.Debug, force)) return;
    console.log(message);
    if (stackTrace) console.trace();
  }

  warn(message: any, { stackTrace = false, force = false } = {}) {
    if (this.skipped(LogLevel.Warn, force)) return;
    console.warn(message);
    if (stackTrace) console.trace();
  }

  error(message: any | any[], { force = false } = {}) {
    if (this.skipped(LogLevel.Error, force)) return;
    console.error(message);
  }
}

const ALWAYS = new Logger({ level: LogLevel.Trace });
const LOG_LEVEL = LogLevel.Warn;

export default new Logger({ level: LOG_LEVEL });