import { LinkedList } from 'glimmer-util';
import { PathReference } from 'glimmer-reference';
import DOMHelper from '../dom';
import { Bounds } from '../bounds';
import UpdatingVM, { ExceptionHandler } from './update';
import { UpdatingOpcode } from '../opcodes';

export default class RenderResult implements Bounds, ExceptionHandler {
  private updating: LinkedList<UpdatingOpcode>;
  private bounds: Bounds;
  private dom: DOMHelper;
  private self: PathReference;

  constructor(updating: LinkedList<UpdatingOpcode>, bounds: Bounds, dom: DOMHelper, self: PathReference) {
    this.updating = updating;
    this.bounds = bounds;
    this.dom = dom;
    this.self = self;
  }

  rerender(self?: any) {
    let vm = new UpdatingVM(this.dom);

    if (self !== undefined) {
      this.self['update'](self);
    }

    vm.execute(this.updating, this);
  }

  parentElement() {
    return this.bounds.parentElement();
  }

  firstNode() {
    return this.bounds.firstNode();
  }

  lastNode() {
    return this.bounds.lastNode();
  }

  opcodes(): LinkedList<UpdatingOpcode> {
    return this.updating;
  }

  handleException() {
    throw "this should never happen";
  }
}
