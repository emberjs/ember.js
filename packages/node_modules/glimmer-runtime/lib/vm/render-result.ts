import { LinkedList } from 'glimmer-util';
import { UpdatableReference } from 'glimmer-reference';
import Environment from '../environment';
import DOMHelper from '../dom';
import { Bounds } from '../bounds';
import UpdatingVM, { ExceptionHandler } from './update';
import { UpdatingOpcode } from '../opcodes';

interface RenderResultOptions {
  env: Environment;
  updating: LinkedList<UpdatingOpcode>;
  bounds: Bounds;
  self: UpdatableReference;
}

export default class RenderResult implements Bounds, ExceptionHandler {
  private env: Environment;
  private updating: LinkedList<UpdatingOpcode>;
  private bounds: Bounds;
  private self: UpdatableReference;

  constructor({ env, updating, bounds, self } : RenderResultOptions) {
    this.env = env;
    this.updating = updating;
    this.bounds = bounds;
    this.self = self;
  }

  rerender(newSelf?: any) {
    let { env, updating, self } = this;

    env.begin();

    let vm = new UpdatingVM(env);

    if (newSelf !== undefined) {
      self.update(newSelf);
    }

    vm.execute(updating, this);

    env.commit();
  }

  parentElement() {
    return this.bounds.parentElement();
  }

  firstNode() {
    return this.bounds.firstNode();
  }

  lastNode() {
    return this.bounds.lastNode();
  }

  opcodes(): LinkedList<UpdatingOpcode> {
    return this.updating;
  }

  handleException() {
    throw "this should never happen";
  }
}
