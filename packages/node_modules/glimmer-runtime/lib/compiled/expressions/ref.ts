import { CompiledExpression } from '../expressions';
import VM from '../../vm/append';
import { InternedString } from 'glimmer-util';
import { PathReference, referenceFromParts } from 'glimmer-reference';

export class CompiledLocalRef extends CompiledExpression {
  public type = "local-ref";
  private debug: string;
  private symbol: number;
  private lookup: InternedString[];

  constructor({ debug, symbol, lookup }: { debug: string, symbol: number, lookup: InternedString[] }) {
    super();
    this.debug = debug;
    this.symbol = symbol;
    this.lookup = lookup;
  }

  evaluate(vm: VM): PathReference {
    let base: PathReference = vm.referenceForSymbol(this.symbol);
    return referenceFromParts(base, this.lookup);
  }

  toJSON(): string {
    let path = [this.debug];
    path.push(...this.lookup);
    return path.join('.');
  }
}

export class CompiledSelfRef extends CompiledExpression {
  public type = "self-ref";
  private parts: InternedString[];

  constructor({ parts }: { parts: InternedString[] }) {
    super();
    this.parts = parts;
  }

  evaluate(vm: VM): PathReference {
    return referenceFromParts(vm.getSelf(), this.parts);
  }

  toJSON(): string {
    let path = ['self'];
    path.push(...this.parts);
    return path.join('.');
  }
}
