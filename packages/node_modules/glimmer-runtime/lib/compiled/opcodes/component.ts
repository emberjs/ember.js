import { Opcode, OpcodeJSON, UpdatingOpcode } from '../../opcodes';
import { Component, ComponentManager, ComponentDefinition } from '../../component/interfaces';
import { UpdateAttributeOpcode } from './dom';
import { VM, UpdatingVM } from '../../vm';
import { CompiledArgs, EvaluatedArgs } from '../../compiled/expressions/args';
import { Templates } from '../../syntax/core';
import { FIXME, InternedString, intern, dict } from 'glimmer-util';
import { CONST_REFERENCE, UpdatableReference } from 'glimmer-reference';

interface OpenComponentOptions {
  definition: ComponentDefinition<any>;
  args: CompiledArgs;
  shadow: InternedString[];
  templates: Templates;
}

export class OpenComponentOpcode extends Opcode {
  public type = "open-component";
  public definition: ComponentDefinition<any>;
  public args: CompiledArgs;
  public shadow: InternedString[];
  public templates: Templates;

  constructor({ definition, args, shadow, templates }: OpenComponentOptions) {
    super();
    this.definition = definition;
    this.args = args;
    this.shadow = shadow;
    this.templates = templates;
  }

  evaluate(vm: VM) {
    let { args: rawArgs, shadow, definition, templates } = this;
    let args = rawArgs.evaluate(vm);

    let manager = definition.manager;
    let component = manager.create(definition, args.named);
    let selfRef = new UpdatableReference(manager.getSelf(component));

    let callerScope = vm.scope();

    // pass through the list of outer attributes to shadow from the
    // invocation site, as well as the component definition as internal
    // arguments.
    args.internal = args.internal || dict<any>();
    args.internal['shadow'] = shadow;
    args.internal['definition'] = definition;

    vm.pushRootScope(selfRef, definition.layout.symbolTable.size);
    vm.invokeLayout({ templates, args, shadow, definition, callerScope });
    vm.env.didCreate(component, manager);
    vm.updateWith(new UpdateComponentOpcode({ name: definition.name, component, manager, args }));
  }

  toJSON(): OpcodeJSON {
    return {
      guid: this._guid,
      type: this.type,
      args: [JSON.stringify(this.definition.name)]
    };
  }
}

export class UpdateComponentOpcode extends UpdatingOpcode {
  public type = "update-component";

  private name: string;
  private component: Component;
  private manager: ComponentManager<any>;
  private args: EvaluatedArgs;

  constructor({ name, component, manager, args } : { name: string, component: Component, manager: ComponentManager<any>, args: EvaluatedArgs }) {
    super();
    this.name = name;
    this.component = component;
    this.manager = manager;
    this.args = args;
  }

  evaluate(vm: UpdatingVM) {
    let { component, manager, args } = this;
    manager.update(component, args.named);
    vm.env.didUpdate(component, manager);
  }

  toJSON(): OpcodeJSON {
    return {
      guid: this._guid,
      type: this.type,
      args: [JSON.stringify(this.name)]
    };
  }
}

// Slow path for non-specialized component invocations. Uses an internal
// named lookup on the args.
export class ShadowAttributesOpcode extends Opcode {
  public type = "shadow-attributes";

  evaluate(vm: VM) {
    let args = vm.frame.getArgs();
    let internal = args.internal;
    let shadow: InternedString[] = internal['shadow'];
    let definition: ComponentDefinition<any> = internal['definition'];

    let named = args.named;

    if (!shadow) return;

    shadow.forEach(name => {
      let reference = named.get(name);
      let value = reference.value();

      if (name === "class") {
        vm.stack().addClass(reference);
      } else {
        vm.stack().setAttribute(name, value);
      }

      if (!reference[CONST_REFERENCE]) {
        vm.updateWith(new UpdateAttributeOpcode(vm.stack().element, name, reference, value));
      }
    });
  }

  toJSON(): OpcodeJSON {
    return {
      guid: this._guid,
      type: this.type,
      args: ["<ARGS>"]
    };
  }
}

export class CloseComponentOpcode extends Opcode {
  public type = "close-component";

  evaluate(vm: VM) {
    vm.popScope();
  }
}