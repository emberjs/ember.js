import { EvaluatedNamedArgs } from '../compiled/expressions/args';
import { FunctionExpression } from '../compiled/expressions/function';
import { Layout, CompiledBlock } from '../compiled/blocks';

import Environment from '../environment';

export interface Component {};
export interface ComponentClass {};

export interface ComponentManager<T extends Component> {
  create(definition: ComponentDefinition<T>, attrs: EvaluatedNamedArgs): T;
  didCreate(component: T);

  update(component: T, attrs: EvaluatedNamedArgs);
  didUpdate(component: T);

  getSelf(component: T): any;
}

export interface ComponentLayoutBuilder {
  env: Environment;
  tag: ComponentTagBuilder;
  attrs: ComponentAttrsBuilder;

  wrapLayout(layout: Layout);
  fromLayout(layout: Layout);
}

export interface ComponentTagBuilder {
  static(tagName: string);
}

export interface ComponentAttrsBuilder {
  static(name: string, value: string);
  dynamic(name: string, value: FunctionExpression);
}

export interface ComponentBodyBuilder {
  fromLayout(layout: Layout);
}

export const CACHED_LAYOUT = "CACHED_LAYOUT [d990e194-8529-4f3b-8ee9-11c58a70f7a4]";

export abstract class ComponentDefinition<T extends Component> {
  public name: string; // for debugging
  public manager: ComponentManager<T>;
  public ComponentClass: ComponentClass;

  private "CACHED_LAYOUT [d990e194-8529-4f3b-8ee9-11c58a70f7a4]": CompiledBlock = null;

  constructor(name: string, manager: ComponentManager<T>, ComponentClass: ComponentClass) {
    this.name = name;
    this.manager = manager;
    this.ComponentClass = ComponentClass;
  }

  protected abstract compile(builder: ComponentLayoutBuilder);
}
