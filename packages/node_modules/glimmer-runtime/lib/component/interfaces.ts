import {
  EvaluatedNamedArgs,
} from '../compiled/expressions/args';

import { Layout } from '../compiled/blocks';
import { ComponentParts } from '../compiler';

import Environment from '../environment';
import SymbolTable from '../symbol-table';

export interface Component {};
export interface ComponentClass {};

export interface ComponentManager<T extends Component> {
  create(definition: ComponentDefinition<T>, attrs: EvaluatedNamedArgs): T;
  didCreate(component: T);

  update(component: T, attrs: EvaluatedNamedArgs);
  didUpdate(component: T);

  getSelf(component: T): any;
}

export abstract class ComponentDefinition<T extends Component> {
  public name: string; // for debugging
  public manager: ComponentManager<T>;
  public ComponentClass: ComponentClass;

  constructor(name: string, manager: ComponentManager<T>, ComponentClass: ComponentClass) {
    this.name = name;
    this.manager = manager;
    this.ComponentClass = ComponentClass;
  }

  abstract getLayout(env: Environment): Layout;

  abstract compile(options: { env: Environment, symbolTable: SymbolTable }): ComponentParts;
}