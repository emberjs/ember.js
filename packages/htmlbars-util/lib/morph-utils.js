/*globals console*/
export function visitChildren(nodes, callback) {
    if (!nodes || nodes.length === 0) {
        return;
    }
    nodes = nodes.slice();
    while (nodes.length) {
        var node = nodes.pop();
        callback(node);
        if (node.childNodes) {
            nodes.push.apply(nodes, node.childNodes);
        }
        else if (node.firstChildMorph) {
            let current = node.firstChildMorph;
            while (current) {
                nodes.push(current);
                current = current.nextMorph;
            }
        }
        else if (node.morphList) {
            let current = node.morphList.firstChildMorph;
            while (current) {
                nodes.push(current);
                current = current.nextMorph;
            }
        }
    }
}
export function validateChildMorphs(env, morph, visitor) {
    var morphList = morph.morphList;
    if (morph.morphList) {
        var current = morphList.firstChildMorph;
        while (current) {
            var next = current.nextMorph;
            validateChildMorphs(env, current, visitor);
            current = next;
        }
    }
    else if (morph.lastResult) {
        morph.lastResult.revalidateWith(env, undefined, undefined, visitor);
    }
    else if (morph.childNodes) {
        // This means that the childNodes were wired up manually
        for (var i = 0, l = morph.childNodes.length; i < l; i++) {
            validateChildMorphs(env, morph.childNodes[i], visitor);
        }
    }
}
export class InternalParams {
    constructor(params, hash) {
        this.params = params || null;
        this.hash = hash || null;
        // REFACTOR TODO: Move templates here?
        // REFACTOR TODO: Move visitor here?
        // REFACTOR TODO: Custom one-level data?
    }
}
export function linkParams(env, scope, morph, path, params, hash) {
    if (morph.linkedParams) {
        return;
    }
    if (env.hooks.linkRenderNode(morph, env, scope, path, params, hash)) {
        morph.linkedParams = new InternalParams(params, hash);
    }
}
export function dump(node) {
    console.group(node, node.isDirty);
    if (node.childNodes) {
        map(node.childNodes, dump);
    }
    else if (node.firstChildMorph) {
        var current = node.firstChildMorph;
        while (current) {
            dump(current);
            current = current.nextMorph;
        }
    }
    else if (node.morphList) {
        dump(node.morphList);
    }
    console.groupEnd();
}
function map(nodes, cb) {
    for (var i = 0, l = nodes.length; i < l; i++) {
        cb(nodes[i]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ycGgtdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaHRtbGJhcnMtdXRpbC9saWIvbW9ycGgtdXRpbHMudHMiXSwibmFtZXMiOlsidmlzaXRDaGlsZHJlbiIsInZhbGlkYXRlQ2hpbGRNb3JwaHMiLCJJbnRlcm5hbFBhcmFtcyIsIkludGVybmFsUGFyYW1zLmNvbnN0cnVjdG9yIiwibGlua1BhcmFtcyIsImR1bXAiLCJtYXAiXSwibWFwcGluZ3MiOiJBQUFBLG1CQUFtQjtBQUVuQiw4QkFBOEIsS0FBSyxFQUFFLFFBQVE7SUFDM0NBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEtBQUtBLElBQUlBLEtBQUtBLENBQUNBLE1BQU1BLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQUNBLE1BQU1BLENBQUNBO0lBQUNBLENBQUNBO0lBRTdDQSxLQUFLQSxHQUFHQSxLQUFLQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtJQUV0QkEsT0FBT0EsS0FBS0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7UUFDcEJBLElBQUlBLElBQUlBLEdBQUdBLEtBQUtBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO1FBQ3ZCQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUVmQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNwQkEsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFDM0NBLENBQUNBO1FBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBLENBQUNBO1lBQ2hDQSxJQUFJQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQTtZQUVuQ0EsT0FBT0EsT0FBT0EsRUFBRUEsQ0FBQ0E7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QSxDQUFDQSxLQUFLQSxFQUFFQSxHQUFHQSxFQUFFQSxLQUFLQSxFQUFFQSxJQUFJQSxFQUFFQSxNQUFNQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNwRUEsS0FBS0EsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsY0FBY0EsQ0FBQ0EsTUFBTUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDeERBLENBQUNBO0FBQ0hBLENBQUNBO0FBRUQscUJBQXFCLElBQUk7SUFDdkJDLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO0lBRWxDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNwQkEsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDN0JBLENBQUNBO0lBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBLENBQUNBO1FBQ2hDQSxJQUFJQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQTtRQUVuQ0EsT0FBT0EsT0FBT0EsRUFBRUEsQ0FBQ0E7WUFDZkEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFDZEEsT0FBT0EsR0FBR0EsT0FBT0EsQ0FBQ0EsU0FBU0EsQ0FBQ0E7UUFDOUJBLENBQUNBO0lBQ0hBLENBQUNBO0lBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO1FBQzFCQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtJQUN2QkEsQ0FBQ0E7SUFFREEsT0FBT0EsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0E7QUFDckJBLENBQUNBO0FBRUQsYUFBYSxLQUFLLEVBQUUsRUFBRTtJQUNwQkMsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7UUFDdkNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBQ2ZBLENBQUNBO0FBQ0hBLENBQUNBIn0=