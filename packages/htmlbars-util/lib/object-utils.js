/*globals console*/
import assert from "./assert";
export function merge(options, defaults) {
    for (var prop in defaults) {
        if (options.hasOwnProperty(prop)) {
            continue;
        }
        options[prop] = defaults[prop];
    }
    return options;
}
export function shallowCopy(obj) {
    return merge({}, obj);
}
export function keySet(obj) {
    var set = {};
    for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
            set[prop] = true;
        }
    }
    return set;
}
export function keyLength(obj) {
    var count = 0;
    for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
            count++;
        }
    }
    return count;
}
function ALWAYS_PASSES() { return true; }
function type(debugName, _typeDef) {
    let typeDef = merge(_typeDef, {
        debugName: debugName,
        default: undefined,
        check: ALWAYS_PASSES,
        required: false
    });
    let check = typeDef.check;
    if (typeof check === 'string') {
        typeDef.check = function (val) { return typeof val === check; };
    }
    let typeFunc = function (overriddenDefault) {
        return merge({ default: overriddenDefault }, typeDef);
    };
    merge(typeFunc, typeDef);
    return typeFunc;
}
const DEFAULT_FUNCTION = function () { };
export const REQUIRED = type('REQUIRED', {}, (val, presence) => !!presence);
export const ANY = type('ANY', { default: undefined });
export const STRING = type('STRING', { default: '', check: 'string' });
export const BOOLEAN = type('BOOLEAN', { default: false, check: 'boolean' });
export const OBJECT = type('OBJECT', { default: null, check: 'object' });
export const NUMBER = type('NUMBER', { default: 0, check: 'number' });
export const FUNCTION = type('FUNCTION', { default: DEFAULT_FUNCTION, check: 'function' });
export const ARRAY = type('ARRAY', { default: null, check: val => Array.isArray(val) });
let alreadyWarned = false;
export function debugStruct(shape) {
    if (typeof console !== 'undefined' && !alreadyWarned) {
        alreadyWarned = true;
        console.log("Do not leave debugStruct around when not developing HTMLBars");
    }
    let keys = Object.keys(shape);
    return function (options) {
        Object.keys(options).forEach(field => {
            assert(field in shape, `${field} passed for struct, but it was not in the keys: ${keys.join(', ')}`);
        });
        keys.forEach(field => {
            let type = shape[field];
            if (options[field] !== undefined) {
                assert(type.check(options[field]), `${field} failed the ${type.debugName} type check; val=${options[field]}`);
                this[field] = options[field];
            }
            else {
                assert(!type.required, `${field} was required, but not provided`);
                this[field] = shape[field].default;
            }
        });
        Object.seal(this);
    };
}
export function prodStruct(shape) {
    let keys = Object.keys(shape);
    let len = keys.length;
    return function (options) {
        for (let i = 0; i < len; i++) {
            let key = keys[i];
            let val = options[key];
            this[key] = val === undefined ? shape[key].default : val;
        }
    };
}
export { debugStruct as struct };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2h0bWxiYXJzLXV0aWwvbGliL29iamVjdC11dGlscy50cyJdLCJuYW1lcyI6WyJtZXJnZSIsInNoYWxsb3dDb3B5Iiwia2V5U2V0Iiwia2V5TGVuZ3RoIiwiQUxXQVlTX1BBU1NFUyIsInR5cGUiLCJkZWJ1Z1N0cnVjdCIsInByb2RTdHJ1Y3QiXSwibWFwcGluZ3MiOiJBQUFBLG1CQUFtQjtPQUVaLE1BQU0sTUFBTSxVQUFVO0FBRTdCLHNCQUFzQixPQUFPLEVBQUUsUUFBUTtJQUNyQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsSUFBSUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDMUJBLEVBQUVBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQUNBLFFBQVFBLENBQUNBO1FBQUNBLENBQUNBO1FBQy9DQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUNqQ0EsQ0FBQ0E7SUFDREEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7QUFDakJBLENBQUNBO0FBRUQsNEJBQTRCLEdBQUc7SUFDN0JDLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLEVBQUVBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO0FBQ3hCQSxDQUFDQTtBQUVELHVCQUF1QixHQUFHO0lBQ3hCQyxJQUFJQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQTtJQUViQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNyQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDN0JBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO1FBQ25CQSxDQUFDQTtJQUNIQSxDQUFDQTtJQUVEQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtBQUNiQSxDQUFDQTtBQUVELDBCQUEwQixHQUFHO0lBQzNCQyxJQUFJQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUVkQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNyQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDN0JBLEtBQUtBLEVBQUVBLENBQUNBO1FBQ1ZBLENBQUNBO0lBQ0hBLENBQUNBO0lBRURBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO0FBQ2ZBLENBQUNBO0FBRUQsMkJBQTJCQyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUV6QyxjQUFjLFNBQVMsRUFBRSxRQUFRO0lBQy9CQyxJQUFJQSxPQUFPQSxHQUFHQSxLQUFLQSxDQUFDQSxRQUFRQSxFQUFFQTtRQUM1QkEsU0FBU0EsRUFBRUEsU0FBU0E7UUFDcEJBLE9BQU9BLEVBQUVBLFNBQVNBO1FBQ2xCQSxLQUFLQSxFQUFFQSxhQUFhQTtRQUNwQkEsUUFBUUEsRUFBRUEsS0FBS0E7S0FDaEJBLENBQUNBLENBQUNBO0lBRUhBLElBQUlBLEtBQUtBLEdBQUdBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBO0lBQzFCQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxLQUFLQSxLQUFLQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM5QkEsT0FBT0EsQ0FBQ0EsS0FBS0EsR0FBR0EsVUFBU0EsR0FBR0EsSUFBSSxNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDQTtJQUNqRUEsQ0FBQ0E7SUFFREEsSUFBSUEsUUFBUUEsR0FBR0EsVUFBU0EsaUJBQWlCQTtRQUN2QyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDeEQsQ0FBQyxDQUFDQTtJQUVGQSxLQUFLQSxDQUFDQSxRQUFRQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQTtJQUN6QkEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7QUFDbEJBLENBQUNBO0FBRUQsTUFBTSxnQkFBZ0IsR0FBRyxjQUFZLENBQUMsQ0FBQztBQUV2QyxhQUFhLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxRQUFRLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVFLGFBQWEsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUN2RCxhQUFhLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUN2RSxhQUFhLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUM3RSxhQUFhLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUN6RSxhQUFhLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUN0RSxhQUFhLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzNGLGFBQWEsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFeEYsSUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQzFCLDRCQUE0QixLQUFLO0lBQy9CQyxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxPQUFPQSxLQUFLQSxXQUFXQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNyREEsYUFBYUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDckJBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLDhEQUE4REEsQ0FBQ0EsQ0FBQ0E7SUFDOUVBLENBQUNBO0lBRURBLElBQUlBLElBQUlBLEdBQUdBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO0lBRTlCQSxNQUFNQSxDQUFDQSxVQUFTQSxPQUFPQTtRQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLO1lBQ2hDLE1BQU0sQ0FBQyxLQUFLLElBQUksS0FBSyxFQUFFLEdBQUcsS0FBSyxtREFBbUQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkcsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUs7WUFDaEIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXhCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLEtBQUssZUFBZSxJQUFJLENBQUMsU0FBUyxvQkFBb0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDOUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLEtBQUssaUNBQWlDLENBQUMsQ0FBQztnQkFDbEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDckMsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQixDQUFDLENBQUNBO0FBQ0pBLENBQUNBO0FBRUQsMkJBQTJCLEtBQUs7SUFDOUJDLElBQUlBLElBQUlBLEdBQUdBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO0lBQzlCQSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtJQUV0QkEsTUFBTUEsQ0FBQ0EsVUFBU0EsT0FBT0E7UUFDckIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzdCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQixJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsS0FBSyxTQUFTLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7UUFDM0QsQ0FBQztJQUNILENBQUMsQ0FBQ0E7QUFDSkEsQ0FBQ0E7QUFFRCxTQUFTLFdBQVcsSUFBSSxNQUFNLEdBQUcifQ==