[machine.pushf]

format = "PushFrame"
operand-stack = [[], ["$ra", "$fp"]]
operation = "Push a stack frame"

[machine.popf]

format = "PopFrame"
operand-stack = [["$ra", "$fp"], []]
operation = "Pop a stack frame"
skip = true

[machine.vcall]

format = "InvokeVirtual"
operand-stack = [["Handle"], []]
operation = "Evaluate the handle at the top of the stack."

[machine.scall]

format = ["InvokeStatic", "offset:u32"]
operation = "Evaluate the handle."

[machine.goto]

format = ["Jump", "to:u32"]
operation = "Jump to the specified offset."

[machine.ret]

format = "Return"
operation = "Return to the previous frame."
skip = true

[machine.setra]

format = ["ReturnTo", "offset:i32"]
operation = "Return to a place in the program given an offset"

[syscall.ncall]

format = ["Helper", "helper:handle"]
operand-stack = [["Reference...", "Arguments"], ["Reference"]]
operation = "Evaluate a Helper."

[syscall.dynamiccall]

format = ["DynamicHelper"]
operand-stack = [["Reference...", "Reference", "Arguments"], ["Reference"]]
operation = "Evaluate a dynamic helper."

[syscall.vsargs]

format = ["SetNamedVariables", "register:u32"]
operation = """
Bind the named arguments in the Arguments to the symbols
specified by the symbol table in the component state at register.
"""

[syscall.vbblocks]

format = ["SetBlocks", "register:u32"]
operation = """
Bind the blocks in the Arguments to the symbols specified by the
symbol table in the component state at register.
"""

[syscall.sbvar]

format = ["SetVariable", "symbol:u32"]
operand-stack = [["Reference"], []]
operation = """
Bind the variable represented by a symbol from
the value at the top of the stack.
"""

[syscall.sblock]

format = ["SetBlock", "symbol:u32"]
operand-stack = [["symbol-table", "scope", "block"], []]
operation = "Bind the block at the top of the stack."

[syscall.symload]

format = ["GetVariable", "symbol:u32"]
operand-stack = [[], ["Reference"]]
operation = """
Push the contents of the variable represented by
a symbol (a positional or named argument) onto
the stack.
"""

[syscall.getprop]

format = ["GetProperty", "property:str"]
operand-stack = [["Reference"], ["Reference"]]
operation = """
Pop a Reference from the top of the stack, and push a
Reference constructed by `.get(property)`.
"""

[syscall.blockload]

format = ["GetBlock", "block:u32"]
notes = "TODO: The three elements on the stack can be null"
operand-stack = [[], ["scope-block"]]
operation = "Push the specified bound block onto the stack."

[syscall.blockspread]

format = ["SpreadBlock"]
operand-stack = [["scope-block"], ["symbol-table", "scope", "handle"]]
operation = "Spread a scope block into three stack elements"

[syscall.hasblockload]

format = ["HasBlock"]
operand-stack = [["block?"], ["bool"]]
operation = """
Push TRUE onto the stack if the specified block
is bound and FALSE if it is not.
"""

[syscall.hasparamsload]

format = ["HasBlockParams"]
operand-stack = [["block?", "scope?", "symbol-table?"], ["bool"]]
operation = """
Push TRUE onto the stack if the specified block
is bound *and* has at least one specified formal
parameter, and FALSE otherwise.
"""

[syscall.concat]

format = ["Concat", "count:u32"]
operand-stack = [["Reference", "Reference..."], ["Reference"]]
operation = """
Pop count `Reference`s off the stack and
construct a new ConcatReference from them (in reverse
order).
"""

[syscall.ifinline]

format = ["IfInline", "count:u32"]
operand-stack = [["Reference", "Reference", "Reference"], ["Reference"]]
operation = """
Inline if expression
"""

[syscall.not]

format = ["Not", "count:u32"]
operand-stack = [["Reference"], ["Reference"]]
operation = """
Inline not expression
"""

[syscall.rconstload]

format = ["Constant", "constant:unknown"]
operand-stack = [[], ["unknown"]]
operation = """
  Push an Object constant onto the stack that is not
  a JavaScript primitive.
"""

[syscall.rconstrefload]

format = ["ConstantReference", "constant:unknown"]
operand-stack = [[], ["Reference"]]
operation = """
  Push a reference constant onto the stack that is not
  a JavaScript primitive.
"""

[syscall.pconstload]

format = ["Primitive", "constant:primitive"]
notes = """
The two high bits of the constant reference describe
the kind of primitive:

00: number
01: string
10: true | false | null | undefined
"""
operand-stack = [[], ["Primitive"]]
operation = """
Wrap a JavaScript primitive in a reference and push it
onto the stack.
"""

[syscall.ptoref]

format = "PrimitiveReference"
operand-stack = [["Primitive"], ["Reference"]]
operation = "Convert the top of the stack into a primitive reference."

[syscall.reifyload]

format = "ReifyU32"
notes = "The Reference represents a u32"
operand-stack = [["Reference"], ["Reference", "u32"]]
operation = "Convert the top of the stack into a number."

[syscall.dup]

format = ["Dup", "register:u32", "offset:u32"]
operand-stack = [["unknown"], ["unknown", "unknown"]]
operation = "Duplicate and push item from an offset in the stack."

[syscall.pop]

format = ["Pop", "count:u32"]
operation = "Pop N items off the stack and throw away the value."
skip = true

[syscall.put]

format = ["Load", "register:u32"]
operand-stack = [["unknown"], []]
operation = "Load a value into a register"

[syscall.regload]

format = ["Fetch", "register:u32"]
operand-stack = [[], ["unknown"]]
operation = "Fetch a value from a register"

[syscall.rscopepush]

format = ["RootScope", "symbols:u32"]
notes = """
A root scope has no parent scope, and therefore inherits no lexical
variables.
"""
operation = "Push a new root scope onto the scope stack."

[syscall.vrscopepush]

format = ["VirtualRootScope", "register:u32"]
notes = """
The symbol count is determined by the component state in
the specified register.
"""
operation = "Push a new root scope onto the scope stack."

[syscall.cscopepush]

format = "ChildScope"
notes = """
A child scope inherits from the current parent scope, and therefore
shares its lexical variables.
"""
operation = "Push a new child scope onto the scope stack."

[syscall.scopepop]

format = "PopScope"
operation = "Pop the current scope from the scope stack."

[syscall.apnd_text]

format = ["Text", "contents:str"]
operation = "Append a Text node with value `contents`"

[syscall.apnd_comment]

format = ["Comment", "contents:str"]
operation = "Append a Comment node with value `contents`"

[syscall.apnd_dynhtml]

format = "AppendHTML"
operand-stack = [["Reference"], []]
operation = "Append content as HTML."

[syscall.apnd_dynshtml]

format = "AppendSafeHTML"
operand-stack = [["Reference"], []]
operation = "Append SafeHTML as HTML."

[syscall.apnd_dynfrag]

format = "AppendDocumentFragment"
operand-stack = [["Reference"], []]
operation = "Append DocumentFragment."

[syscall.apnd_dynnode]

format = "AppendNode"
operand-stack = [["Reference"], []]
operation = "Append Node."

[syscall.apnd_dyntext]

format = "AppendText"
operand-stack = [["Reference"], []]
operation = "Append content as text."

[syscall.apnd_tag]

format = ["OpenElement", "tag:str"]
operation = "Open a new Element named `tag`."

[syscall.apnd_dyntag]

format = "OpenDynamicElement"
operand-stack = [["string"], []]
operation = """
Open a new Element with a name on the stack.
"""

[syscall.apnd_remotetag]

format = "PushRemoteElement"
notes = "the references represent string, node, and element, in order"
operand-stack = [["Reference", "Reference", "Reference"], []]
operation = "Open a new remote element"

[syscall.apnd_attr]

format = ["StaticAttr", "name:str", "value:str", "namespace:option-str"]
operation = "Add an attribute to the current Element."

[syscall.apnd_dynattr]

format = ["DynamicAttr", "name:str", "trusting:bool", "namespace:option-str"]
notes = """
If `trusting` is false, the host may sanitize the attribute
based upon known risks.
"""
operand-stack = [["Reference"], []]
operation = """
Add an attribute to the current element using the value
at the top of the stack.
"""

[syscall.apnd_cattr]

format = ["ComponentAttr", "name:str", "trusting:bool", "namespace:option-str"]
operand-stack = [["Reference"], []]
operation = """
Add an attribute to the current element using the value
at the top of the stack.
"""

[syscall.apnd_flushtag]

format = "FlushElement"
operation = "Finish setting attributes on the current element."

[syscall.apnd_closetag]

format = "CloseElement"
operation = "Close the current element."

[syscall.apnd_closeremotetag]

format = "PopRemoteElement"
operation = "Close the current remote element"

[syscall.apnd_modifier]

format = ["Modifier", "helper:handle"]
operand-stack = [["Arguments"], []]
operation = "Execute the modifier represented by the handle"

[syscall.setdynscope]

format = ["BindDynamicScope", "names:str-array"]
notes = """
This is used to expose `-with-dynamic-vars`, and is a
niche feature.
"""
operand-stack = [["Reference", "Reference..."], []]
operation = "Bind stack values as dynamic variables."

[syscall.dynscopepush]

format = "PushDynamicScope"
operation = "Push a dynamic scope frame"

[syscall.dynscopepop]

format = "PopDynamicScope"
operation = "Pop a dynamic scope frame"

[syscall.cmpblock]

format = "CompileBlock"
operand-stack = [["CompilableBlock"], ["Handle"]]
operation = "Compile the InlineBlock at the top of the stack."

[syscall.scopeload]

format = ["PushBlockScope", "scope:scope"]
operand-stack = [[], ["scope"]]
operation = "Push a scope onto the stack."

[syscall.dsymload]

format = ["PushSymbolTable", "table:symbol-table"]
operand-stack = [[], ["symbol-table"]]
operation = "Push a symbol table onto the stack."

[syscall.invokeyield]

format = "InvokeYield"
operand-stack = [["Reference...", "Arguments", "symbol-table", "handle"], []]
operation = "Yield to a block."

[syscall.iftrue]

format = ["JumpIf", "to:u32"]
operand-stack = [["Reference"], []]
operation = """
Jump to the specified offset if the value at
the top of the stack is true.
"""

[syscall.iffalse]

format = ["JumpUnless", "to:u32"]
operand-stack = [["Reference"], []]
operation = """
Jump to the specified offset if the value at
the top of the stack is false.
"""

[syscall.ifeq]

format = ["JumpEq", "to:i32", "comparison:i32"]
operand-stack = [["u32"], ["u32"]]
operation = """
Jump to the specified offset if the value at
the top of the stack is the same as the
comparison.
"""

[syscall.assert_eq]

format = "AssertSame"
notes = "The reference is a u32"
operand-stack = [["Reference"], ["Reference"]]
operation = """
Validate that the value at the top of the stack
hasn't changed.
"""

[syscall.blk_start]

format = ["Enter", "args:u32"]
notes = """
Soon after this opcode, one of Jump, JumpIf,
JumpUnless, or JumpEq will produce an updating
assertion. If that assertion fails, the appending
VM will be re-entered, and the instructions from `from`
to `to` will be executed.

TODO: Save and restore.
"""
operation = """
Start tracking a new output block that could change
if one of its inputs changes.
"""

[syscall.blk_end]

format = "Exit"
notes = """
This finalizes the validators that the updating
block must check to determine whether it's safe to
skip running the contents.
"""
operation = "Finish tracking the current block."

[syscall.anytobool]

format = "ToBoolean"
operand-stack = [["Reference"], ["Reference"]]
operation = "Convert the top of the stack into a boolean reference."

[syscall.list_start]

format = ["EnterList", "address:u32", "address:u32"]
operand-stack = [["Reference", "Reference"], ["Reference..."]]
operation = "Enter a list."

[syscall.list_end]

format = "ExitList"
operation = "Exit the current list."

[syscall.iter]

format = ["Iterate", "end:u32"]
notes = """
In Form 1, the stack will have (in reverse order):

- the key, as a string
- the current iterated value
- the memoized iterated value
"""
operation = """
Set up the stack for iterating for a given key,
or jump to `end` if there is nothing left to
iterate.
"""
skip = true

[syscall.main]

format = ["Main", "state:register"]
operand-stack = [["Invocation", "ComponentDefinition"], []]
operation = "Test whether a reference contains a component definition."

[syscall.ctload]

format = "ContentType"
notes = "The new reference represents a ContentType"
operand-stack = [["Reference"], ["Reference", "Reference"]]
operation = "Push the content type onto the stack."

[syscall.dctload]

format = "DynamicContentType"
notes = "The new reference represents a DynamicContentType"
operand-stack = [["Reference"], ["Reference", "Reference"]]
operation = "Push the content type onto the stack."

[syscall.curry]

format = ["Curry", "type:u32", "is-strict:bool"]
notes = """
TODO: CurriedValue is { Reference, Type, CapturedArguments }
"""
operand-stack = [
  [
    "Reference",
    "Reference...",
    "Arguments",
  ],
  [
    "CurriedComponent",
  ],
]
operation = "Curry a value of type for a later invocation."

[syscall.cmload]

format = ["PushComponentDefinition", "spec:handle"]
notes = """
The handle is a handle for a runtime ComponentDefinition.
"""
operand-stack = [[], ["ComponentDefinition"]]
operation = "Push an appropriate ComponentDefinition onto the stack."

[syscall.dciload]

format = "PushDynamicComponentInstance"
operand-stack = [["ComponentDefinition"], ["InitialComponentState"]]
operation = """
Pushes the ComponentInstance onto the stack that is
used during the invoke.
"""

[syscall.cdload]

format = ["ResolveDynamicComponent", "owner:owner"]
operand-stack = [["Reference"], ["ComponentDefinition"]]
operation = "Push a resolved component definition onto the stack"

[syscall.argsload]

format = ["PushArgs", "names:str-array", "block-names:str-array", "flags:u32"]
notes = """
This arguments object is only necessary when calling into
user-specified hooks. It is meant to be implemented as a
transient proxy that reads into the stack as needed.
Holding onto the Arguments after the call has completed is
illegal.
"""
operand-stack = [["Reference..."], ["Reference...", "Arguments"]]
operation = "Push a user representation of args onto the stack."

[syscall.emptyargsload]

format = "PushEmptyArgs"
operand-stack = [[], ["Arguments"]]
operation = "Push empty args onto the stack"

[syscall.argspop]

format = "PopArgs"
notes = """
The arguments object contains the information of how many user
supplied args the component was invoked with. To clear them from
the stack we must pop it from the stack and call `clear` on it
to remove the argument values from the stack.
"""
operand-stack = [["Reference...", "Arguments"], []]
operation = "Pops Arguments from the stack and clears the next N args."

[syscall.argsprep]

format = ["PrepareArgs", "state:register"]
operation = "..."
skip = true

[syscall.argscapture]

format = "CaptureArgs"
notes = """
The Arguments object is mutated in place because it is usually
consumed immediately after being pushed on to the stack. In
some situations, such as with curried components, information
about more than one Argument may need to exist on the stack at
once. In those cases, the CaptureArgs instruction pops an
Arguments object off the stack and replaces it with the
immutable CapturedArgs snapshot.
"""
operand-stack = [["Arguments"], ["CapturedArguments"]]
operation = "Replaces Arguments on the stack with CapturedArguments"

[syscall.comp_create]

format = ["CreateComponent", "flags:u32", "state:register"]
notes = """
Flags:

* 0b001: Has a default block
* 0b010: Has an else block
"""
operation = "Create the component and push it onto the stack."

[syscall.comp_dest]

format = ["RegisterComponentDestructor", "state:register"]
operation = "Register a destructor for the current component"

[syscall.comp_elops]

format = "PutComponentOperations"
operation = "Push a new ElementOperations for the current component."

[syscall.comp_selfload]

format = ["GetComponentSelf", "state:register"]
operand-stack = [[], ["Reference"]]
operation = "Push the component's `self` onto the stack."

[syscall.comp_tagload]

format = ["GetComponentTagName", "state:register"]
operand-stack = [[], ["option-str"]]
operation = "Push the component's `tagName` onto the stack."

[syscall.comp_layoutload]

format = ["GetComponentLayout", "state:register"]
operand-stack = [[], ["ProgramSymbolTable", "handle"]]
operation = "Get the component layout from the manager."

[syscall.eval_scope]

format = ["BindEvalScope", "state:register"]
operation = "Populate the eval lookup if necessary."

[syscall.eval_setup]

format = ["SetupForEval", "state:register"]
operation = "Setup for eval"

[syscall.comp_layoutput]

format = ["PopulateLayout", "state:register"]
operand-stack = [["ProgramSymbolTable", "handle"], []]
operation = """
Populate the state register with the layout currently
on the stack.
"""

[syscall.comp_invokelayout]

format = ["InvokeComponentLayout", "state:register"]
operation = "Invoke the layout returned by the manager."

[syscall.comp_begin]

format = "BeginComponentTransaction"
operand-stack = [["ComponentManager", "T"], ["ComponentManager", "T"]]
operation = "Begin a new cache group"

[syscall.comp_commit]

format = "CommitComponentTransaction"
operation = "Commit the current cache group"

[syscall.comp_created]

format = ["DidCreateElement", "state:register"]
operation = "Invoke didCreateElement on the current component manager"

[syscall.comp_rendered]

format = ["DidRenderLayout", "state:register"]
operation = "Invoke didRenderLayout on the current component manager"

[syscall.debugger]

format = ["Debugger", "symbols:str-array", "debugInfo:array"]
operation = "Activate the debugger"
