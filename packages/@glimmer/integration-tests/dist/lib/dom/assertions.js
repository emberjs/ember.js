import { dict, assign } from '@glimmer/util';
function isDebugElement(el) {
    return !el.nodeType;
}
function extract(element) {
    if (element === null) {
        return { element: null, description: 'element' };
    }
    else if (isDebugElement(element)) {
        return element;
    }
    else {
        return { element, description: 'element' };
    }
}
export function equalsElement(input, tagName, attributes, content) {
    let { element, description } = extract(input);
    if (element === null) {
        QUnit.assert.pushResult({
            result: false,
            actual: element,
            expected: true,
            message: `failed - expected ${description} to not be null`,
        });
        return;
    }
    QUnit.assert.pushResult({
        result: element.tagName === tagName.toUpperCase(),
        actual: element.tagName.toLowerCase(),
        expected: tagName,
        message: `expect ${description}'s tagName to be ${tagName}`,
    });
    let expectedAttrs = dict();
    let expectedCount = 0;
    for (let prop in attributes) {
        expectedCount++;
        let expected = attributes[prop];
        let matcher = isMatcher(expected) ? expected : equalsAttr(expected);
        expectedAttrs[prop] = matcher;
        QUnit.assert.pushResult({
            result: expectedAttrs[prop].match(element && element.getAttribute(prop)),
            actual: matcher.fail(element && element.getAttribute(prop)),
            expected: matcher.fail(element && element.getAttribute(prop)),
            message: `Expected ${description}'s ${prop} attribute ${matcher.expected()}`,
        });
    }
    let actualAttributes = dict();
    if (element) {
        for (let i = 0, l = element.attributes.length; i < l; i++) {
            actualAttributes[element.attributes[i].name] = element.attributes[i].value;
        }
    }
    if (!(element instanceof HTMLElement)) {
        QUnit.assert.pushResult({
            result: element instanceof HTMLElement,
            actual: null,
            expected: null,
            message: 'Element must be an HTML Element, not an SVG Element',
        });
    }
    else {
        QUnit.assert.pushResult({
            result: element.attributes.length === expectedCount,
            actual: element.attributes.length,
            expected: expectedCount,
            message: `Expected ${expectedCount} attributes; got ${element.outerHTML}`,
        });
        if (content !== null) {
            QUnit.assert.pushResult({
                result: element.innerHTML === content,
                actual: element.innerHTML,
                expected: content,
                message: `${description} had '${content}' as its content`,
            });
        }
    }
}
export function assertIsElement(node) {
    let nodeType = node === null ? null : node.nodeType;
    QUnit.assert.pushResult({
        result: nodeType === 1,
        expected: 1,
        actual: nodeType,
        message: 'expected node to be an element',
    });
    return nodeType === 1;
}
export function assertNodeTagName(node, tagName) {
    if (assertIsElement(node)) {
        const lowerTagName = node.tagName.toLowerCase();
        const nodeTagName = node.tagName;
        QUnit.assert.pushResult({
            result: lowerTagName === tagName || nodeTagName === tagName,
            expected: tagName,
            actual: nodeTagName,
            message: `expected tagName to be ${tagName} but was ${nodeTagName}`,
        });
        return nodeTagName === tagName || lowerTagName === tagName;
    }
    return false;
}
export function equalsAttr(expected) {
    return {
        '3d4ef194-13be-4ccf-8dc7-862eea02c93e': true,
        match(actual) {
            return expected === actual;
        },
        expected() {
            return `to equal ${expected}`;
        },
        fail(actual) {
            return `${actual} did not equal ${expected}`;
        },
    };
}
export function assertEmberishElement(...args) {
    let [element, tagName, attrs, contents] = processAssertElementArgs(args);
    let fullAttrs = assign({ class: classes('ember-view'), id: regex(/^ember\d*$/) }, attrs);
    equalsElement(element, tagName, fullAttrs, contents);
}
export function assertSerializedInElement(result, expected, message) {
    let matched = result.match(/<script glmr="%cursor:[0-9]*.%"><\/script>/);
    if (matched) {
        QUnit.assert.ok(true, `has cursor ${matched[0]}`);
        let [, trimmed] = result.split(matched[0]);
        QUnit.assert.equal(trimmed, expected, message);
    }
    else {
        QUnit.assert.ok(false, `does not have a cursor`);
    }
}
export function classes(expected) {
    return {
        '3d4ef194-13be-4ccf-8dc7-862eea02c93e': true,
        match(actual) {
            return (actual &&
                expected
                    .split(' ')
                    .sort()
                    .join(' ') ===
                    actual
                        .split(' ')
                        .sort()
                        .join(' '));
        },
        expected() {
            return `to include '${expected}'`;
        },
        fail(actual) {
            return `'${actual}'' did not match '${expected}'`;
        },
    };
}
export function regex(r) {
    return {
        '3d4ef194-13be-4ccf-8dc7-862eea02c93e': true,
        match(v) {
            return r.test(v);
        },
        expected() {
            return `to match ${r}`;
        },
        fail(actual) {
            return `${actual} did not match ${r}`;
        },
    };
}
export const MATCHER = '3d4ef194-13be-4ccf-8dc7-862eea02c93e';
export function isMatcher(input) {
    if (typeof input !== 'object' || input === null)
        return false;
    return MATCHER in input;
}
/**
  Accomodates the various signatures of `assertEmberishElement` and `assertElement`, which can be any of:

  - element, tagName, attrs, contents
  - element, tagName, contents
  - element, tagName, attrs
  - element, tagName

  TODO: future refactorings should clean up this interface (likely just making all callers pass a POJO)
*/
export function processAssertElementArgs(args) {
    let element = args[0];
    if (args.length === 3) {
        if (typeof args[2] === 'string')
            return [element, args[1], {}, args[2]];
        else
            return [element, args[1], args[2], null];
    }
    else if (args.length === 2) {
        return [element, args[1], {}, null];
    }
    else {
        return [args[0], args[1], args[2], args[3]];
    }
}
export function assertElementShape(...args) {
    let [element, tagName, attrs, contents] = processAssertElementArgs(args);
    equalsElement(element, tagName, attrs, contents);
}
//# sourceMappingURL=data:application/json;base64,