import Serializer from '@simple-dom/serializer';
import voidMap from '@simple-dom/void-map';
import { clearElement } from '@glimmer/util';
export function toInnerHTML(parent) {
    let serializer = new Serializer(voidMap);
    return serializer.serializeChildren(parent);
}
export function toOuterHTML(parent) {
    let serializer = new Serializer(voidMap);
    return serializer.serialize(parent);
}
export function getElementByClassName(element, className) {
    let current = firstElementChild(element);
    while (current) {
        if (classList(current).indexOf(className) > -1) {
            return current;
        }
        else {
            let recurse = getElementByClassName(current, className);
            if (recurse)
                return recurse;
            current = nextElementSibling(current);
        }
    }
    return null;
}
export function getElementsByTagName(element, tagName, accum = []) {
    let tag = tagName.toUpperCase();
    let current = firstElementChild(element);
    while (current) {
        if (current.tagName === tag) {
            accum.push(current);
        }
        getElementsByTagName(current, tagName, accum);
        current = nextElementSibling(current);
    }
    return accum;
}
export function classList(element) {
    let attr = element.getAttribute('class');
    if (attr === null)
        return [];
    return attr.split(/\s+/);
}
export function toTextContent(parent) {
    return new TextSerializer(voidMap).serializeChildren(parent);
}
export function replaceHTML(parent, value) {
    clearElement(parent);
    parent.insertAdjacentHTML("afterbegin" /* afterbegin */, value);
}
export function assertElement(node) {
    if (!node || node.nodeType !== 1 /* ELEMENT_NODE */) {
        throw new Error(`Expected element, got ${node}`);
    }
    return node;
}
export function hasAttribute(parent, attr) {
    let attrs = parent.attributes;
    for (let i = 0; i < attrs.length; i++) {
        if (attrs[i].name === attr)
            return true;
    }
    return false;
}
export function firstElementChild(parent) {
    let current = parent.firstChild;
    while (current) {
        if (current.nodeType === 1 /* ELEMENT_NODE */) {
            return current;
        }
        current = current.nextSibling;
    }
    return null;
}
export function nextElementSibling(node) {
    let current = node.nextSibling;
    while (current) {
        if (current.nodeType === 1 /* ELEMENT_NODE */) {
            return current;
        }
        current = current.nextSibling;
    }
    return null;
}
export function elementId(element) {
    return element.getAttribute('id');
}
class TextSerializer extends Serializer {
    openTag(_element) {
        return '';
    }
    closeTag(_element) {
        return '';
    }
    text(text) {
        return text.nodeValue || '';
    }
    comment(_comment) {
        return '';
    }
    rawHTMLSection(_content) {
        throw new Error('Unexpected raw HTML section in serialized text');
    }
}
//# sourceMappingURL=data:application/json;base64,