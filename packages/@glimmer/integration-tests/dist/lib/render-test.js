import { bump, isConst } from '@glimmer/reference';
import { clearElement, dict, expect, assign } from '@glimmer/util';
import { CURLY_TEST_COMPONENT, GLIMMER_TEST_COMPONENT, } from './components';
import { assertElementShape, assertEmberishElement } from './dom/assertions';
import { normalizeInnerHTML } from './dom/normalize';
import { assertElement, toInnerHTML } from './dom/simple-utils';
import { equalTokens, isServerMarker, normalizeSnapshot } from './snapshot';
export class Count {
    constructor() {
        this.expected = dict();
        this.actual = dict();
    }
    expect(name, count = 1) {
        this.expected[name] = count;
        this.actual[name] = (this.actual[name] || 0) + 1;
    }
    assert() {
        QUnit.assert.deepEqual(this.actual, this.expected, 'TODO');
    }
}
export class RenderTest {
    constructor(delegate) {
        this.delegate = delegate;
        this.assert = QUnit.assert;
        this.context = dict();
        this.renderResult = null;
        this.helpers = dict();
        this.snapshot = [];
        this.count = new Count();
        this.element = delegate.getInitialElement();
    }
    registerHelper(name, helper) {
        this.delegate.registerHelper(name, helper);
    }
    registerModifier(name, ModifierClass) {
        this.delegate.registerModifier(name, ModifierClass);
    }
    registerComponent(type, name, layout, Class) {
        this.delegate.registerComponent(type, this.testType, name, layout, Class);
    }
    buildComponent(blueprint) {
        let invocation = '';
        switch (this.testType) {
            case 'Glimmer':
                invocation = this.buildGlimmerComponent(blueprint);
                break;
            case 'Curly':
                invocation = this.buildCurlyComponent(blueprint);
                break;
            case 'Dynamic':
                invocation = this.buildDynamicComponent(blueprint);
                break;
            case 'Basic':
                invocation = this.buildBasicComponent(blueprint);
                break;
            case 'Fragment':
                invocation = this.buildFragmentComponent(blueprint);
                break;
            default:
                throw new Error(`Invalid test type ${this.testType}`);
        }
        return invocation;
    }
    buildArgs(args) {
        let { testType } = this;
        let sigil = '';
        let needsCurlies = false;
        if (testType === 'Glimmer' || testType === 'Basic' || testType === 'Fragment') {
            sigil = '@';
            needsCurlies = true;
        }
        return `${Object.keys(args)
            .map(arg => {
            let rightSide;
            let value = args[arg];
            if (needsCurlies) {
                let isString = value && (value[0] === "'" || value[0] === '"');
                if (isString) {
                    rightSide = `${value}`;
                }
                else {
                    rightSide = `{{${value}}}`;
                }
            }
            else {
                rightSide = `${value}`;
            }
            return `${sigil}${arg}=${rightSide}`;
        })
            .join(' ')}`;
    }
    buildBlockParams(blockParams) {
        return `${blockParams.length > 0 ? ` as |${blockParams.join(' ')}|` : ''}`;
    }
    buildElse(elseBlock) {
        return `${elseBlock ? `{{else}}${elseBlock}` : ''}`;
    }
    buildAttributes(attrs = {}) {
        return Object.keys(attrs)
            .map(attr => `${attr}=${attrs[attr]}`)
            .join(' ');
    }
    buildAngleBracketComponent(blueprint) {
        let { args = {}, attributes = {}, template, name = GLIMMER_TEST_COMPONENT, blockParams = [], } = blueprint;
        let invocation = [];
        invocation.push(`<${name}`);
        let componetArgs = this.buildArgs(args);
        if (componetArgs !== '') {
            invocation.push(componetArgs);
        }
        let attrs = this.buildAttributes(attributes);
        if (attrs !== '') {
            invocation.push(attrs);
        }
        let open = invocation.join(' ');
        invocation = [open];
        if (template) {
            let block = [];
            let params = this.buildBlockParams(blockParams);
            if (params !== '') {
                block.push(params);
            }
            block.push(`>`);
            block.push(template);
            block.push(`</${name}>`);
            invocation.push(block.join(''));
        }
        else {
            invocation.push(' ');
            invocation.push(`/>`);
        }
        return invocation.join('');
    }
    buildGlimmerComponent(blueprint) {
        let { tag = 'div', layout, name = GLIMMER_TEST_COMPONENT } = blueprint;
        let invocation = this.buildAngleBracketComponent(blueprint);
        let layoutAttrs = this.buildAttributes(blueprint.layoutAttributes);
        this.assert.ok(true, `generated glimmer layout as ${`<${tag} ${layoutAttrs} ...attributes>${layout}</${tag}>`}`);
        this.delegate.registerComponent('Glimmer', this.testType, name, `<${tag} ${layoutAttrs} ...attributes>${layout}</${tag}>`);
        this.assert.ok(true, `generated glimmer invocation as ${invocation}`);
        return invocation;
    }
    buildCurlyBlockTemplate(name, template, blockParams, elseBlock) {
        let block = [];
        block.push(this.buildBlockParams(blockParams));
        block.push('}}');
        block.push(template);
        block.push(this.buildElse(elseBlock));
        block.push(`{{/${name}}}`);
        return block.join('');
    }
    buildCurlyComponent(blueprint) {
        let { args = {}, layout, template, attributes, else: elseBlock, name = CURLY_TEST_COMPONENT, blockParams = [], } = blueprint;
        if (attributes) {
            throw new Error('Cannot pass attributes to curly components');
        }
        let invocation = [];
        if (template) {
            invocation.push(`{{#${name}`);
        }
        else {
            invocation.push(`{{${name}`);
        }
        let componentArgs = this.buildArgs(args);
        if (componentArgs !== '') {
            invocation.push(' ');
            invocation.push(componentArgs);
        }
        if (template) {
            invocation.push(this.buildCurlyBlockTemplate(name, template, blockParams, elseBlock));
        }
        else {
            invocation.push('}}');
        }
        this.assert.ok(true, `generated curly layout as ${layout}`);
        this.delegate.registerComponent('Curly', this.testType, name, layout);
        invocation = invocation.join('');
        this.assert.ok(true, `generated curly invocation as ${invocation}`);
        return invocation;
    }
    buildFragmentComponent(blueprint) {
        let { layout, name = GLIMMER_TEST_COMPONENT } = blueprint;
        let invocation = this.buildAngleBracketComponent(blueprint);
        this.assert.ok(true, `generated fragment layout as ${layout}`);
        this.delegate.registerComponent('Basic', this.testType, name, `${layout}`);
        this.assert.ok(true, `generated fragment invocation as ${invocation}`);
        return invocation;
    }
    buildBasicComponent(blueprint) {
        let { tag = 'div', layout, name = GLIMMER_TEST_COMPONENT } = blueprint;
        let invocation = this.buildAngleBracketComponent(blueprint);
        this.assert.ok(true, `generated basic layout as ${layout}`);
        this.delegate.registerComponent('Basic', this.testType, name, `<${tag} ...attributes>${layout}</${tag}>`);
        this.assert.ok(true, `generated basic invocation as ${invocation}`);
        return invocation;
    }
    buildDynamicComponent(blueprint) {
        let { args = {}, layout, template, attributes, else: elseBlock, name = GLIMMER_TEST_COMPONENT, blockParams = [], } = blueprint;
        if (attributes) {
            throw new Error('Cannot pass attributes to curly components');
        }
        let invocation = [];
        if (template) {
            invocation.push('{{#component componentName');
        }
        else {
            invocation.push('{{component componentName');
        }
        let componentArgs = this.buildArgs(args);
        if (componentArgs !== '') {
            invocation.push(' ');
            invocation.push(componentArgs);
        }
        if (template) {
            invocation.push(this.buildCurlyBlockTemplate('component', template, blockParams, elseBlock));
        }
        else {
            invocation.push('}}');
        }
        this.assert.ok(true, `generated dynamic layout as ${layout}`);
        this.delegate.registerComponent('Curly', this.testType, name, layout);
        invocation = invocation.join('');
        this.assert.ok(true, `generated dynamic invocation as ${invocation}`);
        return invocation;
    }
    shouldBeVoid(tagName) {
        clearElement(this.element);
        let html = '<' + tagName + " data-foo='bar'><p>hello</p>";
        this.delegate.renderTemplate(html, this.context, this.element, () => this.takeSnapshot());
        let tag = '<' + tagName + ' data-foo="bar">';
        let closing = '</' + tagName + '>';
        let extra = '<p>hello</p>';
        html = normalizeInnerHTML(toInnerHTML(this.element));
        QUnit.assert.pushResult({
            result: html === tag + extra || html === tag + closing + extra,
            actual: html,
            expected: tag + closing + extra,
            message: tagName + ' should be a void element',
        });
    }
    render(template, properties = {}) {
        QUnit.assert.ok(true, `Rendering ${template} with ${JSON.stringify(properties)}`);
        if (typeof template === 'object') {
            let blueprint = template;
            template = this.buildComponent(blueprint);
            if (this.testType === 'Dynamic' && properties['componentName'] === undefined) {
                properties['componentName'] = blueprint.name || GLIMMER_TEST_COMPONENT;
            }
        }
        this.setProperties(properties);
        this.renderResult = this.delegate.renderTemplate(template, this.context, this.element, () => this.takeSnapshot());
    }
    rerender(properties = {}) {
        QUnit.assert.ok(true, `rerender ${JSON.stringify(properties)}`);
        this.setProperties(properties);
        let self = this.delegate.getSelf(this.context);
        if (!isConst(self)) {
            self.forceUpdate(this.context);
        }
        let result = expect(this.renderResult, 'the test should call render() before rerender()');
        result.env.begin();
        result.rerender();
        result.env.commit();
    }
    set(key, value) {
        this.context[key] = value;
    }
    setProperties(properties) {
        assign(this.context, properties);
        bump();
    }
    takeSnapshot() {
        let snapshot = (this.snapshot = []);
        let node = this.element.firstChild;
        let upped = false;
        while (node && node !== this.element) {
            if (upped) {
                if (node.nextSibling) {
                    node = node.nextSibling;
                    upped = false;
                }
                else {
                    snapshot.push('up');
                    node = node.parentNode;
                }
            }
            else {
                if (!isServerMarker(node))
                    snapshot.push(node);
                if (node.firstChild) {
                    snapshot.push('down');
                    node = node.firstChild;
                }
                else if (node.nextSibling) {
                    node = node.nextSibling;
                }
                else {
                    snapshot.push('up');
                    node = node.parentNode;
                    upped = true;
                }
            }
        }
        return snapshot;
    }
    assertStableRerender() {
        this.takeSnapshot();
        this.runTask(() => this.rerender());
        this.assertStableNodes();
    }
    assertHTML(html, message) {
        equalTokens(this.element, html, message ? `${html} (${message})` : html);
        this.takeSnapshot();
    }
    assertComponent(content, attrs = {}) {
        let element = assertElement(this.element.firstChild);
        switch (this.testType) {
            case 'Glimmer':
                assertElementShape(element, 'div', attrs, content);
                break;
            default:
                assertEmberishElement(element, 'div', attrs, content);
        }
        this.takeSnapshot();
    }
    runTask(callback) {
        return callback();
    }
    assertStableNodes({ except: _except } = {
        except: [],
    }) {
        let except;
        if (Array.isArray(_except)) {
            except = uniq(_except);
        }
        else {
            except = [_except];
        }
        let { oldSnapshot, newSnapshot } = normalizeSnapshot(this.snapshot, this.takeSnapshot(), except);
        this.assert.deepEqual(oldSnapshot, newSnapshot, 'DOM nodes are stable');
    }
}
function uniq(arr) {
    return arr.reduce((accum, val) => {
        if (accum.indexOf(val) === -1)
            accum.push(val);
        return accum;
    }, []);
}
//# sourceMappingURL=data:application/json;base64,