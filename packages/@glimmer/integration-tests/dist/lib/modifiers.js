export class TestModifierDefinitionState {
    constructor(Klass) {
        if (Klass) {
            this.instance = new Klass();
        }
    }
}
export class TestModifierManager {
    constructor() {
        this.installedElements = [];
        this.updatedElements = [];
        this.destroyedModifiers = [];
    }
    create(element, state, args, _dynamicScope, dom) {
        return new TestModifier(element, state, args.capture(), dom);
    }
    getTag({ args: { tag } }) {
        return tag;
    }
    install({ element, args, dom, state }) {
        this.installedElements.push(element);
        let firstParam = args.positional.at(0);
        let param = firstParam !== undefined && firstParam.value();
        dom.setAttribute(element, 'data-modifier', `installed - ${param}`);
        if (state.instance && state.instance.didInsertElement) {
            state.instance.element = element;
            state.instance.didInsertElement(args.positional.value(), args.named.value());
        }
        return;
    }
    update({ element, args, dom, state }) {
        this.updatedElements.push(element);
        let firstParam = args.positional.at(0);
        let param = firstParam !== undefined && firstParam.value();
        dom.setAttribute(element, 'data-modifier', `updated - ${param}`);
        if (state.instance && state.instance.didUpdate) {
            state.instance.didUpdate(args.positional.value(), args.named.value());
        }
        return;
    }
    getDestructor(modifier) {
        return {
            destroy: () => {
                this.destroyedModifiers.push(modifier);
                let { element, dom, state } = modifier;
                if (state.instance && state.instance.willDestroyElement) {
                    state.instance.willDestroyElement();
                }
                dom.removeAttribute(element, 'data-modifier');
            },
        };
    }
}
export class TestModifier {
    constructor(element, state, args, dom) {
        this.element = element;
        this.state = state;
        this.args = args;
        this.dom = dom;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kaWZpZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL21vZGlmaWVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1QkEsTUFBTSxPQUFPLDJCQUEyQjtJQUV0QyxZQUFZLEtBQStCO1FBQ3pDLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1NBQzdCO0lBQ0gsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLG1CQUFtQjtJQUFoQztRQUVTLHNCQUFpQixHQUFvQixFQUFFLENBQUM7UUFDeEMsb0JBQWUsR0FBb0IsRUFBRSxDQUFDO1FBQ3RDLHVCQUFrQixHQUFtQixFQUFFLENBQUM7SUF1RGpELENBQUM7SUFyREMsTUFBTSxDQUNKLE9BQXNCLEVBQ3RCLEtBQWtDLEVBQ2xDLElBQWlCLEVBQ2pCLGFBQTJCLEVBQzNCLEdBQXVCO1FBRXZCLE9BQU8sSUFBSSxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFnQjtRQUNwQyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQWdCO1FBQ2pELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkMsSUFBSSxLQUFLLEdBQUcsVUFBVSxLQUFLLFNBQVMsSUFBSSxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDM0QsR0FBRyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLGVBQWUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUVuRSxJQUFJLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRTtZQUNyRCxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7WUFDakMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUM5RTtRQUVELE9BQU87SUFDVCxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFnQjtRQUNoRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuQyxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxJQUFJLEtBQUssR0FBRyxVQUFVLEtBQUssU0FBUyxJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMzRCxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsYUFBYSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRWpFLElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtZQUM5QyxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUN2RTtRQUVELE9BQU87SUFDVCxDQUFDO0lBRUQsYUFBYSxDQUFDLFFBQXNCO1FBQ2xDLE9BQU87WUFDTCxPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUNaLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3ZDLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLFFBQVEsQ0FBQztnQkFDdkMsSUFBSSxLQUFLLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEVBQUU7b0JBQ3ZELEtBQUssQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztpQkFDckM7Z0JBQ0QsR0FBRyxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7WUFDaEQsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sWUFBWTtJQUN2QixZQUNTLE9BQXNCLEVBQ3RCLEtBQWtDLEVBQ2xDLElBQXVCLEVBQ3ZCLEdBQXVCO1FBSHZCLFlBQU8sR0FBUCxPQUFPLENBQWU7UUFDdEIsVUFBSyxHQUFMLEtBQUssQ0FBNkI7UUFDbEMsU0FBSSxHQUFKLElBQUksQ0FBbUI7UUFDdkIsUUFBRyxHQUFILEdBQUcsQ0FBb0I7SUFDN0IsQ0FBQztDQUNMIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2ltcGxlRWxlbWVudCB9IGZyb20gJ0BzaW1wbGUtZG9tL2ludGVyZmFjZSc7XG5pbXBvcnQge1xuICBEaWN0LFxuICBNb2RpZmllck1hbmFnZXIsXG4gIEdsaW1tZXJUcmVlQ2hhbmdlcyxcbiAgRGVzdHJveWFibGUsXG4gIER5bmFtaWNTY29wZSxcbiAgVk1Bcmd1bWVudHMsXG4gIENhcHR1cmVkQXJndW1lbnRzLFxufSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFRhZyB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVzdE1vZGlmaWVyQ29uc3RydWN0b3Ige1xuICBuZXcgKCk6IFRlc3RNb2RpZmllckluc3RhbmNlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRlc3RNb2RpZmllckluc3RhbmNlIHtcbiAgZWxlbWVudD86IFNpbXBsZUVsZW1lbnQ7XG4gIGRpZEluc2VydEVsZW1lbnQoX3BhcmFtczogdW5rbm93bltdLCBfaGFzaDogRGljdDx1bmtub3duPik6IHZvaWQ7XG4gIGRpZFVwZGF0ZShfcGFyYW1zOiB1bmtub3duW10sIF9oYXNoOiBEaWN0PHVua25vd24+KTogdm9pZDtcbiAgd2lsbERlc3Ryb3lFbGVtZW50KCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBUZXN0TW9kaWZpZXJEZWZpbml0aW9uU3RhdGUge1xuICBpbnN0YW5jZT86IFRlc3RNb2RpZmllckluc3RhbmNlO1xuICBjb25zdHJ1Y3RvcihLbGFzcz86IFRlc3RNb2RpZmllckNvbnN0cnVjdG9yKSB7XG4gICAgaWYgKEtsYXNzKSB7XG4gICAgICB0aGlzLmluc3RhbmNlID0gbmV3IEtsYXNzKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUZXN0TW9kaWZpZXJNYW5hZ2VyXG4gIGltcGxlbWVudHMgTW9kaWZpZXJNYW5hZ2VyPFRlc3RNb2RpZmllciwgVGVzdE1vZGlmaWVyRGVmaW5pdGlvblN0YXRlPiB7XG4gIHB1YmxpYyBpbnN0YWxsZWRFbGVtZW50czogU2ltcGxlRWxlbWVudFtdID0gW107XG4gIHB1YmxpYyB1cGRhdGVkRWxlbWVudHM6IFNpbXBsZUVsZW1lbnRbXSA9IFtdO1xuICBwdWJsaWMgZGVzdHJveWVkTW9kaWZpZXJzOiBUZXN0TW9kaWZpZXJbXSA9IFtdO1xuXG4gIGNyZWF0ZShcbiAgICBlbGVtZW50OiBTaW1wbGVFbGVtZW50LFxuICAgIHN0YXRlOiBUZXN0TW9kaWZpZXJEZWZpbml0aW9uU3RhdGUsXG4gICAgYXJnczogVk1Bcmd1bWVudHMsXG4gICAgX2R5bmFtaWNTY29wZTogRHluYW1pY1Njb3BlLFxuICAgIGRvbTogR2xpbW1lclRyZWVDaGFuZ2VzXG4gICkge1xuICAgIHJldHVybiBuZXcgVGVzdE1vZGlmaWVyKGVsZW1lbnQsIHN0YXRlLCBhcmdzLmNhcHR1cmUoKSwgZG9tKTtcbiAgfVxuXG4gIGdldFRhZyh7IGFyZ3M6IHsgdGFnIH0gfTogVGVzdE1vZGlmaWVyKTogVGFnIHtcbiAgICByZXR1cm4gdGFnO1xuICB9XG5cbiAgaW5zdGFsbCh7IGVsZW1lbnQsIGFyZ3MsIGRvbSwgc3RhdGUgfTogVGVzdE1vZGlmaWVyKSB7XG4gICAgdGhpcy5pbnN0YWxsZWRFbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgIGxldCBmaXJzdFBhcmFtID0gYXJncy5wb3NpdGlvbmFsLmF0KDApO1xuICAgIGxldCBwYXJhbSA9IGZpcnN0UGFyYW0gIT09IHVuZGVmaW5lZCAmJiBmaXJzdFBhcmFtLnZhbHVlKCk7XG4gICAgZG9tLnNldEF0dHJpYnV0ZShlbGVtZW50LCAnZGF0YS1tb2RpZmllcicsIGBpbnN0YWxsZWQgLSAke3BhcmFtfWApO1xuXG4gICAgaWYgKHN0YXRlLmluc3RhbmNlICYmIHN0YXRlLmluc3RhbmNlLmRpZEluc2VydEVsZW1lbnQpIHtcbiAgICAgIHN0YXRlLmluc3RhbmNlLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgc3RhdGUuaW5zdGFuY2UuZGlkSW5zZXJ0RWxlbWVudChhcmdzLnBvc2l0aW9uYWwudmFsdWUoKSwgYXJncy5uYW1lZC52YWx1ZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICB1cGRhdGUoeyBlbGVtZW50LCBhcmdzLCBkb20sIHN0YXRlIH06IFRlc3RNb2RpZmllcikge1xuICAgIHRoaXMudXBkYXRlZEVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gICAgbGV0IGZpcnN0UGFyYW0gPSBhcmdzLnBvc2l0aW9uYWwuYXQoMCk7XG4gICAgbGV0IHBhcmFtID0gZmlyc3RQYXJhbSAhPT0gdW5kZWZpbmVkICYmIGZpcnN0UGFyYW0udmFsdWUoKTtcbiAgICBkb20uc2V0QXR0cmlidXRlKGVsZW1lbnQsICdkYXRhLW1vZGlmaWVyJywgYHVwZGF0ZWQgLSAke3BhcmFtfWApO1xuXG4gICAgaWYgKHN0YXRlLmluc3RhbmNlICYmIHN0YXRlLmluc3RhbmNlLmRpZFVwZGF0ZSkge1xuICAgICAgc3RhdGUuaW5zdGFuY2UuZGlkVXBkYXRlKGFyZ3MucG9zaXRpb25hbC52YWx1ZSgpLCBhcmdzLm5hbWVkLnZhbHVlKCkpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGdldERlc3RydWN0b3IobW9kaWZpZXI6IFRlc3RNb2RpZmllcik6IERlc3Ryb3lhYmxlIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVzdHJveTogKCkgPT4ge1xuICAgICAgICB0aGlzLmRlc3Ryb3llZE1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcbiAgICAgICAgbGV0IHsgZWxlbWVudCwgZG9tLCBzdGF0ZSB9ID0gbW9kaWZpZXI7XG4gICAgICAgIGlmIChzdGF0ZS5pbnN0YW5jZSAmJiBzdGF0ZS5pbnN0YW5jZS53aWxsRGVzdHJveUVsZW1lbnQpIHtcbiAgICAgICAgICBzdGF0ZS5pbnN0YW5jZS53aWxsRGVzdHJveUVsZW1lbnQoKTtcbiAgICAgICAgfVxuICAgICAgICBkb20ucmVtb3ZlQXR0cmlidXRlKGVsZW1lbnQsICdkYXRhLW1vZGlmaWVyJyk7XG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRlc3RNb2RpZmllciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBlbGVtZW50OiBTaW1wbGVFbGVtZW50LFxuICAgIHB1YmxpYyBzdGF0ZTogVGVzdE1vZGlmaWVyRGVmaW5pdGlvblN0YXRlLFxuICAgIHB1YmxpYyBhcmdzOiBDYXB0dXJlZEFyZ3VtZW50cyxcbiAgICBwdWJsaWMgZG9tOiBHbGltbWVyVHJlZUNoYW5nZXNcbiAgKSB7fVxufVxuIl19