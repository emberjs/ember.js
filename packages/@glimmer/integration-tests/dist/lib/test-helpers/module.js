import { JitRenderDelegate } from '../modes/jit/delegate';
import { keys } from '@glimmer/util';
import { AotRenderDelegate } from '../modes/aot/delegate';
import { NodeRenderDelegate } from '../modes/node/env';
import { JitSerializationDelegate, AotSerializationDelegate } from '../suites/custom-dom-helper';
export function jitSuite(klass, options = { componentModule: false }) {
    return suite(klass, JitRenderDelegate, options);
}
export function nodeSuite(klass, options = { componentModule: false }) {
    return suite(klass, NodeRenderDelegate, options);
}
export function nodeComponentSuite(klass) {
    return suite(klass, NodeRenderDelegate, { componentModule: true });
}
export function jitComponentSuite(klass) {
    return suite(klass, JitRenderDelegate, { componentModule: true });
}
export function aotSuite(klass, options = { componentModule: false }) {
    return suite(klass, AotRenderDelegate, options);
}
export function aotComponentSuite(klass) {
    return suite(klass, AotRenderDelegate, { componentModule: true });
}
export function jitSerializeSuite(klass, options = { componentModule: false }) {
    return suite(klass, JitSerializationDelegate, options);
}
export function aotSerializeSuite(klass, options = { componentModule: false }) {
    return suite(klass, AotSerializationDelegate, options);
}
export function componentSuite(klass, Delegate) {
    return suite(klass, Delegate, { componentModule: true });
}
export function suite(klass, Delegate, options = { componentModule: false }) {
    let suiteName = klass.suiteName;
    if (options.componentModule) {
        if (shouldRunTest(Delegate)) {
            componentModule(`${Delegate.style} :: Components :: ${suiteName}`, klass, Delegate);
        }
    }
    else {
        QUnit.module(`[integration] ${Delegate.style} :: ${suiteName}`);
        for (let prop in klass.prototype) {
            const test = klass.prototype[prop];
            if (isTestFunction(test) && shouldRunTest(Delegate)) {
                QUnit.test(prop, assert => {
                    let instance = new klass(new Delegate());
                    test.call(instance, assert, instance.count);
                    instance.count.assert();
                });
            }
        }
    }
}
function componentModule(name, klass, Delegate) {
    let tests = {
        glimmer: [],
        curly: [],
        dynamic: [],
        basic: [],
        fragment: [],
    };
    function createTest(prop, test, skip) {
        let shouldSkip;
        if (skip === true || test.skip === true) {
            shouldSkip = true;
        }
        return (type, klass) => {
            if (!shouldSkip) {
                QUnit.test(prop, assert => {
                    let instance = new klass(new Delegate());
                    instance.testType = type;
                    test.call(instance, assert, instance.count);
                });
            }
        };
    }
    for (let prop in klass.prototype) {
        const test = klass.prototype[prop];
        if (isTestFunction(test)) {
            if (test['kind'] === undefined) {
                let skip = test['skip'];
                switch (skip) {
                    case 'glimmer':
                        tests.curly.push(createTest(prop, test));
                        tests.dynamic.push(createTest(prop, test));
                        tests.glimmer.push(createTest(prop, test, true));
                        break;
                    case 'curly':
                        tests.glimmer.push(createTest(prop, test));
                        tests.dynamic.push(createTest(prop, test));
                        tests.curly.push(createTest(prop, test, true));
                        break;
                    case 'dynamic':
                        tests.glimmer.push(createTest(prop, test));
                        tests.curly.push(createTest(prop, test));
                        tests.dynamic.push(createTest(prop, test, true));
                        break;
                    case true:
                        if (test['kind'] === 'basic') {
                            // Basic components are not part of matrix testing
                            tests.basic.push(createTest(prop, test, true));
                        }
                        else if (test['kind'] === 'fragment') {
                            tests.fragment.push(createTest(prop, test, true));
                        }
                        else {
                            ['glimmer', 'curly', 'dynamic'].forEach(kind => {
                                tests[kind].push(createTest(prop, test, true));
                            });
                        }
                    default:
                        tests.glimmer.push(createTest(prop, test));
                        tests.curly.push(createTest(prop, test));
                        tests.dynamic.push(createTest(prop, test));
                }
                continue;
            }
            let kind = test['kind'];
            if (kind === 'curly') {
                tests.curly.push(createTest(prop, test));
                tests.dynamic.push(createTest(prop, test));
            }
            if (kind === 'glimmer') {
                tests.glimmer.push(createTest(prop, test));
            }
            if (kind === 'dynamic') {
                tests.curly.push(createTest(prop, test));
                tests.dynamic.push(createTest(prop, test));
            }
            if (kind === 'basic') {
                tests.basic.push(createTest(prop, test));
            }
            if (kind === 'fragment') {
                tests.fragment.push(createTest(prop, test));
            }
        }
    }
    QUnit.module(`[integration] ${name}`, () => {
        nestedComponentModules(klass, tests);
    });
}
function nestedComponentModules(klass, tests) {
    keys(tests).forEach(type => {
        let formattedType = `${type[0].toUpperCase() + type.slice(1)}`;
        QUnit.module(`[integration] ${formattedType}`, () => {
            for (let i = tests[type].length - 1; i >= 0; i--) {
                let t = tests[type][i];
                t(formattedType, klass);
                tests[type].pop();
            }
        });
    });
}
const HAS_TYPED_ARRAYS = typeof Uint16Array !== 'undefined';
function shouldRunTest(Delegate) {
    let isEagerDelegate = Delegate['isEager'];
    if (HAS_TYPED_ARRAYS) {
        return true;
    }
    if (!HAS_TYPED_ARRAYS && !isEagerDelegate) {
        return true;
    }
    return false;
}
function isTestFunction(value) {
    return typeof value === 'function' && value.isTest;
}
//# sourceMappingURL=data:application/json;base64,