import { RenderTest } from '../render-test';
export declare class InitialRenderSuite extends RenderTest {
    static suiteName: string;
    name: string;
    'HTML text content'(): void;
    'HTML tags'(): void;
    'HTML attributes'(): void;
    'HTML data attributes'(): void;
    'HTML checked attributes'(): void;
    'HTML selected options'(): void;
    'HTML multi-select options'(): void;
    'Void Elements'(): void;
    'Nested HTML'(): void;
    'Custom Elements'(): void;
    'Nested Custom Elements'(): void;
    'Moar nested Custom Elements'(): void;
    'Custom Elements with dynamic attributes'(): void;
    'Custom Elements with dynamic content'(): void;
    'Dynamic content within single custom element'(): void;
    'Supports quotes'(): void;
    'Supports backslashes'(): void;
    'Supports new lines'(): void;
    'HTML tag with empty attribute'(): void;
    'Attributes containing a helper are treated like a block'(): void;
    "HTML boolean attribute 'disabled'"(): void;
    'Quoted attribute null values do not disable'(): void;
    'Unquoted attribute null values do not disable'(): void;
    'Quoted attribute string values'(): void;
    'Unquoted attribute string values'(): void;
    'Unquoted img src attribute is not rendered when set to `null`'(): void;
    'Unquoted img src attribute is not rendered when set to `undefined`'(): void;
    'Unquoted a href attribute is not rendered when set to `null`'(): void;
    'Unquoted a href attribute is not rendered when set to `undefined`'(): void;
    'Attribute expression can be followed by another attribute'(): void;
    'Dynamic selected options'(): void;
    'Dynamic multi-select'(): void;
    'HTML comments'(): void;
    'Curlies in HTML comments'(): void;
    'Complex Curlies in HTML comments'(): void;
    'HTML comments with multi-line mustaches'(): void;
    'Top level comments'(): void;
    'Handlebars comments'(): void;
    'Namespaced attribute'(): void;
    '<svg> tag with case-sensitive attribute'(): void;
    'nested element in the SVG namespace'(): void;
    '<foreignObject> tag has an SVG namespace'(): void;
    'Namespaced and non-namespaced elements as siblings'(): void;
    'Namespaced and non-namespaced elements with nesting'(): void;
    'Case-sensitive tag has capitalization preserved'(): void;
    'Text curlies'(): void;
    'Repaired text nodes are ensured in the right place Part 1'(): void;
    'Repaired text nodes are ensured in the right place Part 2'(): void;
    'Repaired text nodes are ensured in the right place Part 3'(): void;
    'Path expressions'(): void;
    'Text curlies perform escaping'(): void;
    'Rerender respects whitespace'(): void;
    'Safe HTML curlies'(): void;
    'Triple curlies'(): void;
    'Triple curlie helpers'(): void;
    'Top level triple curlies'(): void;
    'Top level unescaped tr'(): void;
    'The compiler can handle top-level unescaped td inside tr contextualElement'(): void;
    'Extreme nesting'(): void;
    'Simple blocks'(): void;
    'Nested blocks'(): void;
    Loops(): void;
    'Simple helpers'(): void;
    'Constant negative numbers can render'(): void;
    'Large numeric literals (Number.MAX_SAFE_INTEGER)'(): void;
    'Constant float numbers can render'(): void;
    'GH#13999 The compiler can handle simple helpers with inline null parameter'(): void;
    'GH#13999 The compiler can handle simple helpers with inline string literal null parameter'(): void;
    'GH#13999 The compiler can handle simple helpers with inline undefined parameter'(): void;
    'GH#13999 The compiler can handle simple helpers with positional parameter undefined string literal'(): void;
    'GH#13999 The compiler can handle components with undefined named arguments'(): void;
    'GH#13999 The compiler can handle components with undefined string literal named arguments'(): void;
    'GH#13999 The compiler can handle components with null named arguments'(): void;
    'GH#13999 The compiler can handle components with null string literal named arguments'(): void;
    'Null curly in attributes'(): void;
    'Null in primitive syntax'(): void;
    'Sexpr helpers'(): void;
    'The compiler can handle multiple invocations of sexprs'(): void;
    'The compiler passes along the hash arguments'(): void;
    'Attributes can be populated with helpers that generate a string'(): void;
    'Attribute helpers take a hash'(): void;
    'Attributes containing multiple helpers are treated like a block'(): void;
    'Elements inside a yielded block'(): void;
    'A simple block helper can return text'(): void;
    'A block helper can have an else block'(): void;
}
//# sourceMappingURL=initial-render.d.ts.map