import { EMPTY_BLOCKS, invokeStaticBlock, MacrosImpl, NONE, resolveLayoutForTag, staticComponent, UNHANDLED, } from '@glimmer/opcode-compiler';
export class TestMacros extends MacrosImpl {
    constructor() {
        super();
        let { blocks, inlines } = this;
        blocks.add('identity', (_params, _hash, blocks) => {
            return invokeStaticBlock(blocks.get('default'));
        });
        blocks.add('render-else', (_params, _hash, blocks) => {
            return invokeStaticBlock(blocks.get('else'));
        });
        blocks.addMissing((name, params, hash, blocks, context) => {
            if (!params) {
                params = [];
            }
            let component = resolveLayoutForTag(name, context);
            if (component !== null) {
                return staticComponent(component, [params, hashToArgs(hash), blocks]);
            }
            return NONE;
        });
        inlines.addMissing((name, params, hash, context) => {
            let component = resolveLayoutForTag(name, context);
            if (component !== null) {
                return staticComponent(component, [params, hashToArgs(hash), EMPTY_BLOCKS]);
            }
            return UNHANDLED;
        });
    }
}
function hashToArgs(hash) {
    if (hash === null)
        return null;
    let names = hash[0].map(key => `@${key}`);
    return [names, hash[1]];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFjcm9zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NvbXBpbGUvbWFjcm9zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLFVBQVUsRUFDVixJQUFJLEVBQ0osbUJBQW1CLEVBQ25CLGVBQWUsRUFDZixTQUFTLEdBQ1YsTUFBTSwwQkFBMEIsQ0FBQztBQUVsQyxNQUFNLE9BQU8sVUFBVyxTQUFRLFVBQVU7SUFDeEM7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBRS9CLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNoRCxPQUFPLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFFLENBQUMsQ0FBQztRQUNuRCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNuRCxPQUFPLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFFLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUU7WUFDeEQsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDWCxNQUFNLEdBQUcsRUFBRSxDQUFDO2FBQ2I7WUFFRCxJQUFJLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFbkQsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO2dCQUN0QixPQUFPLGVBQWUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDdkU7WUFFRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQ2pELElBQUksU0FBUyxHQUFHLG1CQUFtQixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztZQUVuRCxJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7Z0JBQ3RCLE9BQU8sZUFBZSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU8sRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQzthQUM5RTtZQUVELE9BQU8sU0FBUyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsU0FBUyxVQUFVLENBQUMsSUFBa0M7SUFDcEQsSUFBSSxJQUFJLEtBQUssSUFBSTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQy9CLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDMUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3B0aW9uLCBXaXJlRm9ybWF0IH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQge1xuICBFTVBUWV9CTE9DS1MsXG4gIGludm9rZVN0YXRpY0Jsb2NrLFxuICBNYWNyb3NJbXBsLFxuICBOT05FLFxuICByZXNvbHZlTGF5b3V0Rm9yVGFnLFxuICBzdGF0aWNDb21wb25lbnQsXG4gIFVOSEFORExFRCxcbn0gZnJvbSAnQGdsaW1tZXIvb3Bjb2RlLWNvbXBpbGVyJztcblxuZXhwb3J0IGNsYXNzIFRlc3RNYWNyb3MgZXh0ZW5kcyBNYWNyb3NJbXBsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGxldCB7IGJsb2NrcywgaW5saW5lcyB9ID0gdGhpcztcblxuICAgIGJsb2Nrcy5hZGQoJ2lkZW50aXR5JywgKF9wYXJhbXMsIF9oYXNoLCBibG9ja3MpID0+IHtcbiAgICAgIHJldHVybiBpbnZva2VTdGF0aWNCbG9jayhibG9ja3MuZ2V0KCdkZWZhdWx0JykhKTtcbiAgICB9KTtcblxuICAgIGJsb2Nrcy5hZGQoJ3JlbmRlci1lbHNlJywgKF9wYXJhbXMsIF9oYXNoLCBibG9ja3MpID0+IHtcbiAgICAgIHJldHVybiBpbnZva2VTdGF0aWNCbG9jayhibG9ja3MuZ2V0KCdlbHNlJykhKTtcbiAgICB9KTtcblxuICAgIGJsb2Nrcy5hZGRNaXNzaW5nKChuYW1lLCBwYXJhbXMsIGhhc2gsIGJsb2NrcywgY29udGV4dCkgPT4ge1xuICAgICAgaWYgKCFwYXJhbXMpIHtcbiAgICAgICAgcGFyYW1zID0gW107XG4gICAgICB9XG5cbiAgICAgIGxldCBjb21wb25lbnQgPSByZXNvbHZlTGF5b3V0Rm9yVGFnKG5hbWUsIGNvbnRleHQpO1xuXG4gICAgICBpZiAoY29tcG9uZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzdGF0aWNDb21wb25lbnQoY29tcG9uZW50LCBbcGFyYW1zLCBoYXNoVG9BcmdzKGhhc2gpLCBibG9ja3NdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE5PTkU7XG4gICAgfSk7XG5cbiAgICBpbmxpbmVzLmFkZE1pc3NpbmcoKG5hbWUsIHBhcmFtcywgaGFzaCwgY29udGV4dCkgPT4ge1xuICAgICAgbGV0IGNvbXBvbmVudCA9IHJlc29sdmVMYXlvdXRGb3JUYWcobmFtZSwgY29udGV4dCk7XG5cbiAgICAgIGlmIChjb21wb25lbnQgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRpY0NvbXBvbmVudChjb21wb25lbnQsIFtwYXJhbXMhLCBoYXNoVG9BcmdzKGhhc2gpLCBFTVBUWV9CTE9DS1NdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFVOSEFORExFRDtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNoVG9BcmdzKGhhc2g6IE9wdGlvbjxXaXJlRm9ybWF0LkNvcmUuSGFzaD4pOiBPcHRpb248V2lyZUZvcm1hdC5Db3JlLkhhc2g+IHtcbiAgaWYgKGhhc2ggPT09IG51bGwpIHJldHVybiBudWxsO1xuICBsZXQgbmFtZXMgPSBoYXNoWzBdLm1hcChrZXkgPT4gYEAke2tleX1gKTtcbiAgcmV0dXJuIFtuYW1lcywgaGFzaFsxXV07XG59XG4iXX0=