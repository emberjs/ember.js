import { precompile as rawPrecompile } from '@glimmer/compiler';
import { templateFactory } from '@glimmer/opcode-compiler';
import { templateMeta } from '@glimmer/util';
export const DEFAULT_TEST_META = Object.freeze({
    kind: 'unknown',
    meta: {},
    module: 'some/template',
    name: 'default',
});
// TODO: This fundamentally has little to do with testing and
// most tests should just use a more generic preprocess, extracted
// out of the test environment.
export function preprocess(template, meta) {
    let wrapper = JSON.parse(rawPrecompile(template));
    let factory = templateFactory(wrapper);
    return factory.create(templateMeta(meta || DEFAULT_TEST_META));
}
export function createTemplate(templateSource, options) {
    let wrapper = JSON.parse(rawPrecompile(templateSource, options));
    return templateFactory(wrapper);
}
export function precompile(string, options) {
    let wrapper = JSON.parse(rawPrecompile(string, options));
    wrapper.block = JSON.parse(wrapper.block);
    return wrapper;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jb21waWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLElBQUksYUFBYSxFQUFxQixNQUFNLG1CQUFtQixDQUFDO0FBU25GLE9BQU8sRUFBRSxlQUFlLEVBQW1CLE1BQU0sMEJBQTBCLENBQUM7QUFDNUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3QyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBMkIsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNyRSxJQUFJLEVBQUUsU0FBUztJQUNmLElBQUksRUFBRSxFQUFFO0lBQ1IsTUFBTSxFQUFFLGVBQWU7SUFDdkIsSUFBSSxFQUFFLFNBQVM7Q0FDaEIsQ0FBQyxDQUFDO0FBRUgsNkRBQTZEO0FBQzdELGtFQUFrRTtBQUNsRSwrQkFBK0I7QUFDL0IsTUFBTSxVQUFVLFVBQVUsQ0FDeEIsUUFBZ0IsRUFDaEIsSUFBNkI7SUFFN0IsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNsRCxJQUFJLE9BQU8sR0FBRyxlQUFlLENBQXlCLE9BQU8sQ0FBQyxDQUFDO0lBQy9ELE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLGlCQUFpQixDQUFDLENBQUMsQ0FBQztBQUNqRSxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FDNUIsY0FBc0IsRUFDdEIsT0FBMkI7SUFFM0IsSUFBSSxPQUFPLEdBQTZDLElBQUksQ0FBQyxLQUFLLENBQ2hFLGFBQWEsQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQ3ZDLENBQUM7SUFDRixPQUFPLGVBQWUsQ0FBVSxPQUFPLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBTUQsTUFBTSxVQUFVLFVBQVUsQ0FDeEIsTUFBYyxFQUNkLE9BQTRCO0lBRTVCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3pELE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsT0FBTyxPQUFzRCxDQUFDO0FBQ2hFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcmVjb21waWxlIGFzIHJhd1ByZWNvbXBpbGUsIFByZWNvbXBpbGVPcHRpb25zIH0gZnJvbSAnQGdsaW1tZXIvY29tcGlsZXInO1xuaW1wb3J0IHtcbiAgQW5ub3RhdGVkTW9kdWxlTG9jYXRvcixcbiAgRW52aXJvbm1lbnQsXG4gIFNlcmlhbGl6ZWRUZW1wbGF0ZVdpdGhMYXp5QmxvY2ssXG4gIFRlbXBsYXRlLFxuICBUZW1wbGF0ZU1ldGEsXG4gIFdpcmVGb3JtYXQsXG59IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgdGVtcGxhdGVGYWN0b3J5LCBUZW1wbGF0ZUZhY3RvcnkgfSBmcm9tICdAZ2xpbW1lci9vcGNvZGUtY29tcGlsZXInO1xuaW1wb3J0IHsgdGVtcGxhdGVNZXRhIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1RFU1RfTUVUQTogQW5ub3RhdGVkTW9kdWxlTG9jYXRvciA9IE9iamVjdC5mcmVlemUoe1xuICBraW5kOiAndW5rbm93bicsXG4gIG1ldGE6IHt9LFxuICBtb2R1bGU6ICdzb21lL3RlbXBsYXRlJyxcbiAgbmFtZTogJ2RlZmF1bHQnLFxufSk7XG5cbi8vIFRPRE86IFRoaXMgZnVuZGFtZW50YWxseSBoYXMgbGl0dGxlIHRvIGRvIHdpdGggdGVzdGluZyBhbmRcbi8vIG1vc3QgdGVzdHMgc2hvdWxkIGp1c3QgdXNlIGEgbW9yZSBnZW5lcmljIHByZXByb2Nlc3MsIGV4dHJhY3RlZFxuLy8gb3V0IG9mIHRoZSB0ZXN0IGVudmlyb25tZW50LlxuZXhwb3J0IGZ1bmN0aW9uIHByZXByb2Nlc3MoXG4gIHRlbXBsYXRlOiBzdHJpbmcsXG4gIG1ldGE/OiBBbm5vdGF0ZWRNb2R1bGVMb2NhdG9yXG4pOiBUZW1wbGF0ZTxUZW1wbGF0ZU1ldGE8QW5ub3RhdGVkTW9kdWxlTG9jYXRvcj4+IHtcbiAgbGV0IHdyYXBwZXIgPSBKU09OLnBhcnNlKHJhd1ByZWNvbXBpbGUodGVtcGxhdGUpKTtcbiAgbGV0IGZhY3RvcnkgPSB0ZW1wbGF0ZUZhY3Rvcnk8QW5ub3RhdGVkTW9kdWxlTG9jYXRvcj4od3JhcHBlcik7XG4gIHJldHVybiBmYWN0b3J5LmNyZWF0ZSh0ZW1wbGF0ZU1ldGEobWV0YSB8fCBERUZBVUxUX1RFU1RfTUVUQSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGVtcGxhdGU8TG9jYXRvcj4oXG4gIHRlbXBsYXRlU291cmNlOiBzdHJpbmcsXG4gIG9wdGlvbnM/OiBQcmVjb21waWxlT3B0aW9uc1xuKTogVGVtcGxhdGVGYWN0b3J5PExvY2F0b3I+IHtcbiAgbGV0IHdyYXBwZXI6IFNlcmlhbGl6ZWRUZW1wbGF0ZVdpdGhMYXp5QmxvY2s8TG9jYXRvcj4gPSBKU09OLnBhcnNlKFxuICAgIHJhd1ByZWNvbXBpbGUodGVtcGxhdGVTb3VyY2UsIG9wdGlvbnMpXG4gICk7XG4gIHJldHVybiB0ZW1wbGF0ZUZhY3Rvcnk8TG9jYXRvcj4od3JhcHBlcik7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVzdENvbXBpbGVPcHRpb25zIGV4dGVuZHMgUHJlY29tcGlsZU9wdGlvbnMge1xuICBlbnY6IEVudmlyb25tZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlY29tcGlsZShcbiAgc3RyaW5nOiBzdHJpbmcsXG4gIG9wdGlvbnM/OiBUZXN0Q29tcGlsZU9wdGlvbnNcbik6IFdpcmVGb3JtYXQuU2VyaWFsaXplZFRlbXBsYXRlPFRlbXBsYXRlTWV0YT4ge1xuICBsZXQgd3JhcHBlciA9IEpTT04ucGFyc2UocmF3UHJlY29tcGlsZShzdHJpbmcsIG9wdGlvbnMpKTtcbiAgd3JhcHBlci5ibG9jayA9IEpTT04ucGFyc2Uod3JhcHBlci5ibG9jayk7XG4gIHJldHVybiB3cmFwcGVyIGFzIFdpcmVGb3JtYXQuU2VyaWFsaXplZFRlbXBsYXRlPFRlbXBsYXRlTWV0YT47XG59XG4iXX0=