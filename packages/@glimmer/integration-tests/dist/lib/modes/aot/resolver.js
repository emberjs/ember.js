import { expect } from '@glimmer/util';
export default class AotRuntimeResolver {
    constructor(table, modules, symbolTables) {
        this.table = table;
        this.modules = modules;
        this.symbolTables = symbolTables;
    }
    lookupHelper(_name, _meta) {
        throw new Error('Method not implemented.');
    }
    lookupModifier(_name, _meta) {
        throw new Error('Method not implemented.');
    }
    lookupComponent(name, referrer) {
        if (referrer === null)
            return null;
        let moduleName = this.modules.resolve(name, referrer, 'ui/components');
        if (!moduleName)
            return null;
        let module = this.modules.get(moduleName);
        return module.get('default');
    }
    lookupPartial(_name, _meta) {
        throw new Error('Method not implemented.');
    }
    resolve(handle) {
        let module = this.table.byHandle.get(handle);
        return this.modules.get(module.module).get('default');
    }
    getInvocation(locator) {
        let handle = this.getVMHandle(locator);
        let symbolTable = expect(this.symbolTables.get(locator), `expected symbol table for module ${locator}`);
        return {
            handle,
            symbolTable,
        };
    }
    compilable(_locator) {
        throw new Error(`Unimplemented; AOT#compilable`);
    }
    getVMHandle(locator) {
        let handle = expect(this.table.vmHandleByModuleLocator.get(locator), `could not find handle for module ${locator}`);
        return handle;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvbW9kZXMvYW90L3Jlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkMsTUFBTSxDQUFDLE9BQU8sT0FBTyxrQkFBa0I7SUFDckMsWUFDVSxLQUEwQixFQUMxQixPQUFnQixFQUNqQixZQUFrRDtRQUZqRCxVQUFLLEdBQUwsS0FBSyxDQUFxQjtRQUMxQixZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2pCLGlCQUFZLEdBQVosWUFBWSxDQUFzQztJQUN4RCxDQUFDO0lBRUosWUFBWSxDQUFDLEtBQWEsRUFBRSxLQUFjO1FBQ3hDLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsY0FBYyxDQUFDLEtBQWEsRUFBRSxLQUFjO1FBQzFDLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsZUFBZSxDQUNiLElBQVksRUFDWixRQUE4QztRQUU5QyxJQUFJLFFBQVEsS0FBSyxJQUFJO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFbkMsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUV2RSxJQUFJLENBQUMsVUFBVTtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBRTdCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQXdCLENBQUM7SUFDdEQsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFhLEVBQUUsS0FBYztRQUN6QyxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELE9BQU8sQ0FBSSxNQUFjO1FBQ3ZCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUUsQ0FBQztRQUM5QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFNLENBQUM7SUFDN0QsQ0FBQztJQUVELGFBQWEsQ0FBQyxPQUFvQztRQUNoRCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLElBQUksV0FBVyxHQUFHLE1BQU0sQ0FDdEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQzlCLG9DQUFvQyxPQUFPLEVBQUUsQ0FDOUMsQ0FBQztRQUVGLE9BQU87WUFDTCxNQUFNO1lBQ04sV0FBVztTQUNaLENBQUM7SUFDSixDQUFDO0lBRUQsVUFBVSxDQUFDLFFBQXFDO1FBQzlDLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQy9DLG9DQUFvQyxPQUFPLEVBQUUsQ0FDOUMsQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dGVybmFsTW9kdWxlVGFibGUsIE1vZHVsZUxvY2F0b3JNYXAgfSBmcm9tICdAZ2xpbW1lci9idW5kbGUtY29tcGlsZXInO1xuaW1wb3J0IHsgTW9kdWxlcyB9IGZyb20gJy4vcmVnaXN0cnknO1xuaW1wb3J0IHsgV3JhcHBlZExvY2F0b3IgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL3Rlc3QtY29tcG9uZW50JztcbmltcG9ydCB7XG4gIFByb2dyYW1TeW1ib2xUYWJsZSxcbiAgT3B0aW9uLFxuICBUZW1wbGF0ZU1ldGEsXG4gIENvbXBvbmVudERlZmluaXRpb24sXG4gIE1vZHVsZUxvY2F0b3IsXG4gIEludm9jYXRpb24sXG4gIFRlbXBsYXRlLFxuICBSdW50aW1lUmVzb2x2ZXIsXG59IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFvdFJ1bnRpbWVSZXNvbHZlciBpbXBsZW1lbnRzIFJ1bnRpbWVSZXNvbHZlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGFibGU6IEV4dGVybmFsTW9kdWxlVGFibGUsXG4gICAgcHJpdmF0ZSBtb2R1bGVzOiBNb2R1bGVzLFxuICAgIHB1YmxpYyBzeW1ib2xUYWJsZXM6IE1vZHVsZUxvY2F0b3JNYXA8UHJvZ3JhbVN5bWJvbFRhYmxlPlxuICApIHt9XG5cbiAgbG9va3VwSGVscGVyKF9uYW1lOiBzdHJpbmcsIF9tZXRhOiB1bmtub3duKTogT3B0aW9uPG51bWJlcj4ge1xuICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuXG4gIGxvb2t1cE1vZGlmaWVyKF9uYW1lOiBzdHJpbmcsIF9tZXRhOiB1bmtub3duKTogT3B0aW9uPG51bWJlcj4ge1xuICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuXG4gIGxvb2t1cENvbXBvbmVudChcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgcmVmZXJyZXI6IE9wdGlvbjxUZW1wbGF0ZU1ldGE8V3JhcHBlZExvY2F0b3I+PlxuICApOiBPcHRpb248Q29tcG9uZW50RGVmaW5pdGlvbj4ge1xuICAgIGlmIChyZWZlcnJlciA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cbiAgICBsZXQgbW9kdWxlTmFtZSA9IHRoaXMubW9kdWxlcy5yZXNvbHZlKG5hbWUsIHJlZmVycmVyLCAndWkvY29tcG9uZW50cycpO1xuXG4gICAgaWYgKCFtb2R1bGVOYW1lKSByZXR1cm4gbnVsbDtcblxuICAgIGxldCBtb2R1bGUgPSB0aGlzLm1vZHVsZXMuZ2V0KG1vZHVsZU5hbWUpO1xuICAgIHJldHVybiBtb2R1bGUuZ2V0KCdkZWZhdWx0JykgYXMgQ29tcG9uZW50RGVmaW5pdGlvbjtcbiAgfVxuXG4gIGxvb2t1cFBhcnRpYWwoX25hbWU6IHN0cmluZywgX21ldGE6IHVua25vd24pOiBPcHRpb248bnVtYmVyPiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgcmVzb2x2ZTxVPihoYW5kbGU6IG51bWJlcik6IFUge1xuICAgIGxldCBtb2R1bGUgPSB0aGlzLnRhYmxlLmJ5SGFuZGxlLmdldChoYW5kbGUpITtcbiAgICByZXR1cm4gdGhpcy5tb2R1bGVzLmdldChtb2R1bGUubW9kdWxlKS5nZXQoJ2RlZmF1bHQnKSBhcyBVO1xuICB9XG5cbiAgZ2V0SW52b2NhdGlvbihsb2NhdG9yOiBUZW1wbGF0ZU1ldGE8TW9kdWxlTG9jYXRvcj4pOiBJbnZvY2F0aW9uIHtcbiAgICBsZXQgaGFuZGxlID0gdGhpcy5nZXRWTUhhbmRsZShsb2NhdG9yKTtcbiAgICBsZXQgc3ltYm9sVGFibGUgPSBleHBlY3QoXG4gICAgICB0aGlzLnN5bWJvbFRhYmxlcy5nZXQobG9jYXRvciksXG4gICAgICBgZXhwZWN0ZWQgc3ltYm9sIHRhYmxlIGZvciBtb2R1bGUgJHtsb2NhdG9yfWBcbiAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGhhbmRsZSxcbiAgICAgIHN5bWJvbFRhYmxlLFxuICAgIH07XG4gIH1cblxuICBjb21waWxhYmxlKF9sb2NhdG9yOiBUZW1wbGF0ZU1ldGE8TW9kdWxlTG9jYXRvcj4pOiBUZW1wbGF0ZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmltcGxlbWVudGVkOyBBT1QjY29tcGlsYWJsZWApO1xuICB9XG5cbiAgZ2V0Vk1IYW5kbGUobG9jYXRvcjogTW9kdWxlTG9jYXRvcik6IG51bWJlciB7XG4gICAgbGV0IGhhbmRsZSA9IGV4cGVjdChcbiAgICAgIHRoaXMudGFibGUudm1IYW5kbGVCeU1vZHVsZUxvY2F0b3IuZ2V0KGxvY2F0b3IpLFxuICAgICAgYGNvdWxkIG5vdCBmaW5kIGhhbmRsZSBmb3IgbW9kdWxlICR7bG9jYXRvcn1gXG4gICAgKTtcbiAgICByZXR1cm4gaGFuZGxlO1xuICB9XG59XG4iXX0=