import { assert, dict } from '@glimmer/util';
export class Modules {
    constructor() {
        this.registry = dict();
    }
    has(name) {
        return name in this.registry;
    }
    get(name) {
        return this.registry[name];
    }
    type(name) {
        let module = this.registry[name];
        return module.type;
    }
    register(name, type, value) {
        assert(name.indexOf('ui/components/ui') === -1, `BUG: ui/components/ui shouldn't be a prefix`);
        assert(!name.match(/^[A-Z]/), 'BUG: Components should be nested under ui/components');
        this.registry[name] = new Module(value, type);
    }
    resolve(name, referrer, defaultRoot) {
        let local = referrer &&
            referrer.locator.module &&
            referrer.locator.module.replace(/^((.*)\/)?([^\/]*)$/, `$1${name}`);
        if (local && this.registry[local]) {
            return local;
        }
        else if (defaultRoot && this.registry[`${defaultRoot}/${name}`]) {
            return `${defaultRoot}/${name}`;
        }
        else if (this.registry[name]) {
            return name;
        }
        else {
            return null;
        }
    }
}
export class Module {
    constructor(dict, type) {
        this.dict = dict;
        this.type = type;
        Object.freeze(this.dict);
    }
    has(key) {
        return key in this.dict;
    }
    get(key) {
        return this.dict[key];
    }
}
export class AotCompilerRegistry {
    constructor(components = dict(), modules = new Modules()) {
        this.components = components;
        this.modules = modules;
    }
    register(name, type, value) {
        this.modules.register(name, type, value);
    }
    addComponent(name, manager, state) {
        this.components[name] = { manager, state };
    }
    resolve(name, referrer, { expected, root } = {}) {
        let moduleName = this.modules.resolve(name, referrer, root);
        if (moduleName === null)
            return null;
        let type = this.modules.type(moduleName);
        if (expected === undefined || type === expected) {
            return moduleName;
        }
        else {
            return null;
        }
    }
    get(name) {
        return this.modules.get(name);
    }
    type(name) {
        return this.modules.type(name);
    }
    getComponentCapabilities(meta) {
        return this.components[meta.locator.module].state.capabilities;
    }
}
export default class EagerCompilerDelegate {
    constructor(registry) {
        this.registry = registry;
    }
    hasComponentInScope(componentName, referrer) {
        let name = this.registry.resolve(componentName, referrer, {
            root: 'ui/components',
            expected: 'component',
        });
        return !!name;
    }
    resolveComponent(componentName, referrer) {
        return {
            module: this.registry.resolve(componentName, referrer, { root: 'ui/components' }),
            name: 'default',
        };
    }
    getComponentCapabilities(meta) {
        return this.registry.getComponentCapabilities(meta);
    }
    hasHelperInScope(helperName, referrer) {
        return !!this.registry.resolve(helperName, referrer, { expected: 'helper' });
    }
    resolveHelper(helperName, referrer) {
        return { module: this.registry.resolve(helperName, referrer), name: 'default' };
    }
    hasModifierInScope(modifierName, referrer) {
        return !!this.registry.resolve(modifierName, referrer, { expected: 'modifier' });
    }
    resolveModifier(modifierName, referrer) {
        return {
            module: this.registry.resolve(modifierName, referrer, { root: 'ui/components' }),
            name: 'default',
        };
    }
    hasPartialInScope(_partialName, _referrer) {
        return false;
    }
    resolvePartial(_partialName, _referrer) {
        throw new Error('Method not implemented.');
    }
}
//# sourceMappingURL=data:application/json;base64,