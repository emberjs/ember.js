export default class AotCompilerDelegate {
    constructor(registry) {
        this.registry = registry;
    }
    hasComponentInScope(componentName, referrer) {
        let name = this.registry.resolve(componentName, referrer, {
            root: 'ui/components',
            expected: 'component',
        });
        return !!name;
    }
    resolveComponent(componentName, referrer) {
        return {
            module: this.registry.resolve(componentName, referrer, { root: 'ui/components' }),
            name: 'default',
        };
    }
    getComponentCapabilities(meta) {
        return this.registry.getComponentCapabilities(meta);
    }
    hasHelperInScope(helperName, referrer) {
        return !!this.registry.resolve(helperName, referrer, { expected: 'helper' });
    }
    resolveHelper(helperName, referrer) {
        return { module: this.registry.resolve(helperName, referrer), name: 'default' };
    }
    hasModifierInScope(modifierName, referrer) {
        return !!this.registry.resolve(modifierName, referrer, { expected: 'modifier' });
    }
    resolveModifier(modifierName, referrer) {
        return {
            module: this.registry.resolve(modifierName, referrer, { root: 'ui/components' }),
            name: 'default',
        };
    }
    hasPartialInScope(_partialName, _referrer) {
        return false;
    }
    resolvePartial(_partialName, _referrer) {
        throw new Error('Method not implemented.');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXItZGVsZWdhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvbW9kZXMvYW90L2NvbXBpbGVyLWRlbGVnYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVNBLE1BQU0sQ0FBQyxPQUFPLE9BQU8sbUJBQW1CO0lBQ3RDLFlBQW9CLFFBQTZCO1FBQTdCLGFBQVEsR0FBUixRQUFRLENBQXFCO0lBQUcsQ0FBQztJQUVyRCxtQkFBbUIsQ0FBQyxhQUFxQixFQUFFLFFBQXNDO1FBQy9FLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUU7WUFDeEQsSUFBSSxFQUFFLGVBQWU7WUFDckIsUUFBUSxFQUFFLFdBQVc7U0FDdEIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxhQUFxQixFQUFFLFFBQXNDO1FBQzVFLE9BQU87WUFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsQ0FBRTtZQUNsRixJQUFJLEVBQUUsU0FBUztTQUNoQixDQUFDO0lBQ0osQ0FBQztJQUVELHdCQUF3QixDQUFDLElBQWtDO1FBQ3pELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsVUFBa0IsRUFBRSxRQUFzQztRQUN6RSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVELGFBQWEsQ0FBQyxVQUFrQixFQUFFLFFBQXNDO1FBQ3RFLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQztJQUNuRixDQUFDO0lBRUQsa0JBQWtCLENBQUMsWUFBb0IsRUFBRSxRQUFzQztRQUM3RSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVELGVBQWUsQ0FBQyxZQUFvQixFQUFFLFFBQXNDO1FBQzFFLE9BQU87WUFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsQ0FBRTtZQUNqRixJQUFJLEVBQUUsU0FBUztTQUNoQixDQUFDO0lBQ0osQ0FBQztJQUVELGlCQUFpQixDQUFDLFlBQW9CLEVBQUUsU0FBdUM7UUFDN0UsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsY0FBYyxDQUFDLFlBQW9CLEVBQUUsU0FBdUM7UUFDMUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBpbGVyRGVsZWdhdGUgfSBmcm9tICdAZ2xpbW1lci9idW5kbGUtY29tcGlsZXInO1xuaW1wb3J0IHsgQ29tcG9uZW50Q2FwYWJpbGl0aWVzLCBNb2R1bGVMb2NhdG9yLCBUZW1wbGF0ZU1ldGEgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFdyYXBwZWRMb2NhdG9yIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy90ZXN0LWNvbXBvbmVudCc7XG5pbXBvcnQgeyBBb3RDb21waWxlclJlZ2lzdHJ5IH0gZnJvbSAnLi9yZWdpc3RyeSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FwYWJpbGl0aWVzU3RhdGUge1xuICBjYXBhYmlsaXRpZXM6IENvbXBvbmVudENhcGFiaWxpdGllcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW90Q29tcGlsZXJEZWxlZ2F0ZSBpbXBsZW1lbnRzIENvbXBpbGVyRGVsZWdhdGU8V3JhcHBlZExvY2F0b3I+IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWdpc3RyeTogQW90Q29tcGlsZXJSZWdpc3RyeSkge31cblxuICBoYXNDb21wb25lbnRJblNjb3BlKGNvbXBvbmVudE5hbWU6IHN0cmluZywgcmVmZXJyZXI6IFRlbXBsYXRlTWV0YTxXcmFwcGVkTG9jYXRvcj4pOiBib29sZWFuIHtcbiAgICBsZXQgbmFtZSA9IHRoaXMucmVnaXN0cnkucmVzb2x2ZShjb21wb25lbnROYW1lLCByZWZlcnJlciwge1xuICAgICAgcm9vdDogJ3VpL2NvbXBvbmVudHMnLFxuICAgICAgZXhwZWN0ZWQ6ICdjb21wb25lbnQnLFxuICAgIH0pO1xuICAgIHJldHVybiAhIW5hbWU7XG4gIH1cblxuICByZXNvbHZlQ29tcG9uZW50KGNvbXBvbmVudE5hbWU6IHN0cmluZywgcmVmZXJyZXI6IFRlbXBsYXRlTWV0YTxXcmFwcGVkTG9jYXRvcj4pOiBNb2R1bGVMb2NhdG9yIHtcbiAgICByZXR1cm4ge1xuICAgICAgbW9kdWxlOiB0aGlzLnJlZ2lzdHJ5LnJlc29sdmUoY29tcG9uZW50TmFtZSwgcmVmZXJyZXIsIHsgcm9vdDogJ3VpL2NvbXBvbmVudHMnIH0pISxcbiAgICAgIG5hbWU6ICdkZWZhdWx0JyxcbiAgICB9O1xuICB9XG5cbiAgZ2V0Q29tcG9uZW50Q2FwYWJpbGl0aWVzKG1ldGE6IFRlbXBsYXRlTWV0YTxXcmFwcGVkTG9jYXRvcj4pOiBDb21wb25lbnRDYXBhYmlsaXRpZXMge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmdldENvbXBvbmVudENhcGFiaWxpdGllcyhtZXRhKTtcbiAgfVxuXG4gIGhhc0hlbHBlckluU2NvcGUoaGVscGVyTmFtZTogc3RyaW5nLCByZWZlcnJlcjogVGVtcGxhdGVNZXRhPFdyYXBwZWRMb2NhdG9yPik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIXRoaXMucmVnaXN0cnkucmVzb2x2ZShoZWxwZXJOYW1lLCByZWZlcnJlciwgeyBleHBlY3RlZDogJ2hlbHBlcicgfSk7XG4gIH1cblxuICByZXNvbHZlSGVscGVyKGhlbHBlck5hbWU6IHN0cmluZywgcmVmZXJyZXI6IFRlbXBsYXRlTWV0YTxXcmFwcGVkTG9jYXRvcj4pOiBNb2R1bGVMb2NhdG9yIHtcbiAgICByZXR1cm4geyBtb2R1bGU6IHRoaXMucmVnaXN0cnkucmVzb2x2ZShoZWxwZXJOYW1lLCByZWZlcnJlcikhLCBuYW1lOiAnZGVmYXVsdCcgfTtcbiAgfVxuXG4gIGhhc01vZGlmaWVySW5TY29wZShtb2RpZmllck5hbWU6IHN0cmluZywgcmVmZXJyZXI6IFRlbXBsYXRlTWV0YTxXcmFwcGVkTG9jYXRvcj4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLnJlZ2lzdHJ5LnJlc29sdmUobW9kaWZpZXJOYW1lLCByZWZlcnJlciwgeyBleHBlY3RlZDogJ21vZGlmaWVyJyB9KTtcbiAgfVxuXG4gIHJlc29sdmVNb2RpZmllcihtb2RpZmllck5hbWU6IHN0cmluZywgcmVmZXJyZXI6IFRlbXBsYXRlTWV0YTxXcmFwcGVkTG9jYXRvcj4pOiBNb2R1bGVMb2NhdG9yIHtcbiAgICByZXR1cm4ge1xuICAgICAgbW9kdWxlOiB0aGlzLnJlZ2lzdHJ5LnJlc29sdmUobW9kaWZpZXJOYW1lLCByZWZlcnJlciwgeyByb290OiAndWkvY29tcG9uZW50cycgfSkhLFxuICAgICAgbmFtZTogJ2RlZmF1bHQnLFxuICAgIH07XG4gIH1cblxuICBoYXNQYXJ0aWFsSW5TY29wZShfcGFydGlhbE5hbWU6IHN0cmluZywgX3JlZmVycmVyOiBUZW1wbGF0ZU1ldGE8V3JhcHBlZExvY2F0b3I+KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmVzb2x2ZVBhcnRpYWwoX3BhcnRpYWxOYW1lOiBzdHJpbmcsIF9yZWZlcnJlcjogVGVtcGxhdGVNZXRhPFdyYXBwZWRMb2NhdG9yPik6IE1vZHVsZUxvY2F0b3Ige1xuICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxufVxuIl19