import { BundleCompiler, DebugConstants, ModuleLocatorMap, } from '@glimmer/bundle-compiler';
import { WrappedBuilder } from '@glimmer/opcode-compiler';
import { StableState } from '@glimmer/reference';
import { clientBuilder, getDynamicVar, renderAotComponent, renderAotMain, renderSync, AotRuntime, } from '@glimmer/runtime';
import { assert, assign, expect } from '@glimmer/util';
import { BasicComponent, BasicComponentManager } from '../../components/basic';
import { EmberishCurlyComponent, EmberishCurlyComponentManager, } from '../../components/emberish-curly';
import { EmberishGlimmerComponent, EmberishGlimmerComponentManager, EMBERISH_GLIMMER_CAPABILITIES, } from '../../components/emberish-glimmer';
import { BASIC_CAPABILITIES, EMBERISH_CURLY_CAPABILITIES } from '../../components/capabilities';
import { AotCompilerRegistry, Modules } from './registry';
import { locatorFor } from '../../locator';
import { HelperReference } from '../../helpers';
import { TestModifierDefinitionState, TestModifierManager, } from '../../modifiers';
import AotRuntimeResolver from './resolver';
import { TestMacros } from '../../compile/macros';
import AotCompilerDelegate from './compiler-delegate';
const COMPONENT_CLASSES = {
    Basic: BasicComponent,
    Glimmer: EmberishGlimmerComponent,
    Dynamic: EmberishCurlyComponent,
    Curly: EmberishCurlyComponent,
    Fragment: null,
};
const COMPONENT_MANAGERS = {
    Basic: new BasicComponentManager(),
    Glimmer: new EmberishGlimmerComponentManager(),
    Dynamic: new EmberishCurlyComponentManager(),
    Curly: new EmberishCurlyComponentManager(),
    Fragment: null,
};
const COMPONENT_CAPABILITIES = {
    Basic: BASIC_CAPABILITIES,
    Glimmer: EMBERISH_GLIMMER_CAPABILITIES,
    Dynamic: EMBERISH_CURLY_CAPABILITIES,
    Curly: EMBERISH_CURLY_CAPABILITIES,
    Fragment: null,
};
export class AotRenderDelegate {
    constructor(doc) {
        this.registry = new AotCompilerRegistry();
        this.compileTimeModules = new Modules();
        this.symbolTables = new ModuleLocatorMap();
        this.registerInternalHelper('-get-dynamic-var', getDynamicVar);
        this.doc = doc || document;
    }
    registerInternalHelper(name, helper) {
        this.registry.register(name, 'helper', { default: helper });
        return helper;
    }
    getElementBuilder(env, cursor) {
        return clientBuilder(env, cursor);
    }
    getInitialElement() {
        return this.doc.createElement('div');
    }
    createElement(tagName) {
        return this.doc.createElement(tagName);
    }
    registerComponent(type, testType, name, template, Class) {
        let module = `ui/components/${name}`;
        let ComponentClass = Class || COMPONENT_CLASSES[type];
        let manager = COMPONENT_MANAGERS[type];
        let capabilities = COMPONENT_CAPABILITIES[type];
        if (!manager || !capabilities) {
            throw new Error(`Not implemented in the Bundle Compiler yet: ${type}`);
        }
        let hasSymbolTable = testType === 'Dynamic';
        let state = {
            name,
            type,
            template,
            capabilities,
            hasSymbolTable,
            ComponentClass,
            locator: locatorFor({ module, name: 'default' }),
            // Populated by the Bundle Compiler in eager mode
            layout: null,
        };
        this.registry.addComponent(module, manager, state);
    }
    getSelf(context) {
        return StableState(context);
    }
    registerHelper(name, helper) {
        let glimmerHelper = args => new HelperReference(helper, args);
        this.registry.register(name, 'helper', { default: glimmerHelper });
    }
    registerModifier(name, ModifierClass) {
        let state = new TestModifierDefinitionState(ModifierClass);
        let manager = new TestModifierManager();
        this.registry.register(name, 'modifier', { default: { manager, state } });
    }
    addRegisteredComponents(bundleCompiler) {
        let { registry, compileTimeModules } = this;
        Object.keys(registry.components).forEach(key => {
            assert(key.indexOf('ui/components') !== -1, `Expected component key to start with ui/components, got ${key}.`);
            let { state, manager } = registry.components[key];
            let locator = locatorFor({ module: key, name: 'default' });
            let block;
            let symbolTable;
            if (state.type === 'Curly' || state.type === 'Dynamic') {
                let block = bundleCompiler.preprocess(state.template);
                let parsedLayout = { block, referrer: locator.meta, asPartial: false };
                let wrapped = new WrappedBuilder(parsedLayout);
                bundleCompiler.addCompilableTemplate(locator, wrapped);
                compileTimeModules.register(key, 'other', {
                    default: wrapped.symbolTable,
                });
                symbolTable = wrapped.symbolTable;
                this.symbolTables.set(locator, symbolTable);
            }
            else {
                block = bundleCompiler.add(locator, expect(state.template, 'expected component definition state to have template'));
                symbolTable = {
                    hasEval: block.hasEval,
                    symbols: block.symbols,
                };
                this.symbolTables.set(locator, symbolTable);
                compileTimeModules.register(key, 'other', {
                    default: symbolTable,
                });
            }
            if (state.hasSymbolTable) {
                registry.register(key, 'component', {
                    default: {
                        state: assign({}, state, { symbolTable }),
                        manager,
                    },
                });
            }
            else {
                registry.register(key, 'component', {
                    default: {
                        state,
                        manager,
                    },
                });
            }
        });
    }
    getBundleCompiler() {
        let { compiler, constants } = getBundleCompiler(this.registry);
        this.constants = constants;
        return compiler;
    }
    getConstants() {
        return this.constants.toPool();
    }
    getRuntimeContext({ table, pool, heap, }) {
        let resolver = new AotRuntimeResolver(table, this.registry.modules, this.symbolTables);
        return AotRuntime(this.doc, { constants: pool, heap }, resolver);
    }
    renderComponent(name, args, element) {
        let bundleCompiler = this.getBundleCompiler();
        this.addRegisteredComponents(bundleCompiler);
        let compilationResult = bundleCompiler.compile();
        let cursor = { element, nextSibling: null };
        let runtime = this.getRuntimeContext(compilationResult);
        let builder = this.getElementBuilder(runtime.env, cursor);
        let iterator = renderAotComponent(runtime, builder, compilationResult.main, name, args);
        return renderSync(runtime.env, iterator);
    }
    renderTemplate(template, context, element) {
        this.registerComponent('Glimmer', 'Glimmer', 'main', template);
        let bundleCompiler = this.getBundleCompiler();
        let locator = locatorFor({ module: 'ui/components/main', name: 'default' });
        // bundleCompiler.add(locator, template);
        this.addRegisteredComponents(bundleCompiler);
        let compilationResult = bundleCompiler.compile();
        let handle = compilationResult.table.vmHandleByModuleLocator.get(locator);
        let cursor = { element, nextSibling: null };
        let runtime = this.getRuntimeContext(compilationResult);
        let builder = this.getElementBuilder(runtime.env, cursor);
        let self = this.getSelf(context);
        let iterator = renderAotMain(runtime, self, builder, handle);
        return renderSync(runtime.env, iterator);
    }
}
AotRenderDelegate.isEager = true;
AotRenderDelegate.style = 'aot';
function getBundleCompiler(registry) {
    let delegate = new AotCompilerDelegate(registry);
    let constants = new DebugConstants();
    let compiler = new BundleCompiler(delegate, {
        macros: new TestMacros(),
        constants,
    });
    return { constants, compiler };
}
//# sourceMappingURL=data:application/json;base64,