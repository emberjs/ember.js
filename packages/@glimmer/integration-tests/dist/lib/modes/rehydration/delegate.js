import { serializeBuilder } from '@glimmer/node';
import { UpdatableReference } from '@glimmer/reference';
import createHTMLDocument from '@simple-dom/document';
import { replaceHTML, toInnerHTML } from '../../dom/simple-utils';
import { JitDelegateContext } from '../jit/delegate';
import { registerComponent, registerHelper, registerModifier } from '../jit/register';
import { renderTemplate } from '../jit/render';
import TestJitRuntimeResolver from '../jit/resolver';
import { debugRehydration } from './builder';
export class RehydrationDelegate {
    constructor() {
        this.self = null;
        this.clientDoc = document;
        this.clientResolver = new TestJitRuntimeResolver();
        this.clientRegistry = this.clientResolver.registry;
        this.clientEnv = JitDelegateContext(this.clientDoc, this.clientResolver, this.clientRegistry);
        this.serverDoc = createHTMLDocument();
        this.serverResolver = new TestJitRuntimeResolver();
        this.serverRegistry = this.serverResolver.registry;
        this.serverEnv = JitDelegateContext(this.serverDoc, this.serverResolver, this.serverRegistry);
    }
    getInitialElement() {
        return this.clientDoc.createElement('div');
    }
    createElement(tagName) {
        return this.clientDoc.createElement(tagName);
    }
    getElementBuilder(env, cursor) {
        if (cursor.element instanceof Node) {
            return debugRehydration(env, cursor);
        }
        return serializeBuilder(env, cursor);
    }
    renderServerSide(template, context, takeSnapshot, element = undefined) {
        element = element || this.serverDoc.createElement('div');
        let cursor = { element, nextSibling: null };
        // Emulate server-side render
        renderTemplate(template, this.serverEnv, this.getSelf(context), this.getElementBuilder(this.serverEnv.runtime.env, cursor));
        takeSnapshot();
        return this.serialize(element);
    }
    getSelf(context) {
        if (!this.self) {
            this.self = new UpdatableReference(context);
        }
        return this.self;
    }
    serialize(element) {
        return toInnerHTML(element);
    }
    renderClientSide(template, context, element) {
        let env = this.clientEnv.runtime.env;
        this.self = null;
        // Client-side rehydration
        let cursor = { element, nextSibling: null };
        let builder = this.getElementBuilder(env, cursor);
        let result = renderTemplate(template, this.clientEnv, this.getSelf(context), builder);
        this.rehydrationStats = {
            clearedNodes: builder['clearedNodes'],
        };
        return result;
    }
    renderTemplate(template, context, element, snapshot) {
        let serialized = this.renderServerSide(template, context, snapshot);
        replaceHTML(element, serialized);
        qunitFixture().appendChild(element);
        return this.renderClientSide(template, context, element);
    }
    registerComponent(type, _testType, name, layout) {
        registerComponent(this.clientRegistry, type, name, layout);
        registerComponent(this.serverRegistry, type, name, layout);
    }
    registerHelper(name, helper) {
        registerHelper(this.clientRegistry, name, helper);
        registerHelper(this.serverRegistry, name, helper);
    }
    registerModifier(name, ModifierClass) {
        registerModifier(this.clientRegistry, name, ModifierClass);
        registerModifier(this.serverRegistry, name, ModifierClass);
    }
}
RehydrationDelegate.isEager = false;
RehydrationDelegate.style = 'rehydration';
export function qunitFixture() {
    return document.getElementById('qunit-fixture');
}
//# sourceMappingURL=data:application/json;base64,