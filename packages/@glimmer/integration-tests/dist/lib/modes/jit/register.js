import { BasicComponentManager } from '../../components/basic';
import { BASIC_CAPABILITIES, STATIC_TAGLESS_CAPABILITIES, CURLY_CAPABILITIES, } from '../../components/capabilities';
import { EmberishCurlyComponent, EmberishCurlyComponentManager, } from '../../components/emberish-curly';
import { EmberishGlimmerComponent, EMBERISH_GLIMMER_CAPABILITIES, EmberishGlimmerComponentManager, } from '../../components/emberish-glimmer';
import { HelperReference } from '../../helpers';
import { TestModifierDefinitionState, TestModifierManager, } from '../../modifiers';
import { PartialDefinition } from '@glimmer/opcode-compiler';
import { locatorFor } from '../../locator';
import { curry } from '@glimmer/runtime';
import { preprocess } from '../../compile';
import { StaticTaglessComponentManager } from '../../components/static-tagless';
const BASIC_COMPONENT_MANAGER = new BasicComponentManager();
const EMBERISH_CURLY_COMPONENT_MANAGER = new EmberishCurlyComponentManager();
const EMBERISH_GLIMMER_COMPONENT_MANAGER = new EmberishGlimmerComponentManager();
const STATIC_TAGLESS_COMPONENT_MANAGER = new StaticTaglessComponentManager();
export function registerTemplate(registry, name, source) {
    return { name, handle: registry.register('template-source', name, source) };
}
export function registerBasicComponent(registry, name, Component, layoutSource) {
    if (name.indexOf('-') !== -1) {
        throw new Error('DEPRECATED: dasherized components');
    }
    let { handle } = registerTemplate(registry, name, layoutSource);
    registerSomeComponent(registry, name, 'Basic', BASIC_COMPONENT_MANAGER, handle, Component, BASIC_CAPABILITIES);
}
export function registerStaticTaglessComponent(registry, name, Component, layoutSource) {
    let { handle } = registerTemplate(registry, name, layoutSource);
    registerSomeComponent(registry, name, 'Fragment', STATIC_TAGLESS_COMPONENT_MANAGER, handle, Component, STATIC_TAGLESS_CAPABILITIES);
}
export function registerEmberishCurlyComponent(registry, name, Component, layoutSource) {
    let layout = null;
    if (layoutSource !== null) {
        layout = registerTemplate(registry, name, layoutSource);
    }
    let handle = layout ? layout.handle : null;
    let ComponentClass = Component || EmberishCurlyComponent;
    registerSomeComponent(registry, name, 'Curly', EMBERISH_CURLY_COMPONENT_MANAGER, handle, ComponentClass, CURLY_CAPABILITIES);
}
export function registerEmberishGlimmerComponent(registry, name, Component, layoutSource) {
    if (name.indexOf('-') !== -1) {
        throw new Error('DEPRECATED: dasherized components');
    }
    let { handle } = registerTemplate(registry, name, layoutSource);
    let ComponentClass = Component || EmberishGlimmerComponent;
    registerSomeComponent(registry, name, 'Glimmer', EMBERISH_GLIMMER_COMPONENT_MANAGER, handle, ComponentClass, EMBERISH_GLIMMER_CAPABILITIES);
}
export function registerHelper(registry, name, helper) {
    let glimmerHelper = args => new HelperReference(helper, args);
    registry.register('helper', name, glimmerHelper);
    return glimmerHelper;
}
export function registerInternalHelper(registry, name, helper) {
    registry.register('helper', name, helper);
    return helper;
}
export function registerInternalModifier(registry, name, manager, state) {
    registry.register('modifier', name, { manager, state });
}
export function registerModifier(registry, name, ModifierClass) {
    let state = new TestModifierDefinitionState(ModifierClass);
    let manager = new TestModifierManager();
    registry.register('modifier', name, { manager, state });
    return { manager, state };
}
export function registerPartial(registry, name, source) {
    let definition = new PartialDefinition(name, preprocess(source));
    registry.register('partial', name, definition);
    return definition;
}
export function resolveHelper(resolver, helperName) {
    let handle = resolver.lookupHelper(helperName);
    return typeof handle === 'number' ? resolver.resolve(handle) : null;
}
export function resolvePartial(resolver, partialName) {
    let handle = resolver.lookupPartial(partialName);
    return typeof handle === 'number' ? resolver.resolve(handle) : null;
}
export function registerComponent(registry, type, name, layout, Class) {
    switch (type) {
        case 'Glimmer':
            registerEmberishGlimmerComponent(registry, name, Class, layout);
            break;
        case 'Curly':
            registerEmberishCurlyComponent(registry, name, Class, layout);
            break;
        case 'Dynamic':
            registerEmberishCurlyComponent(registry, name, Class, layout);
            break;
        case 'Basic':
        case 'Fragment':
            registerBasicComponent(registry, name, Class, layout);
            break;
    }
}
function registerSomeComponent(registry, name, type, manager, layout, ComponentClass, capabilities) {
    let state = {
        name,
        type,
        layout,
        locator: locatorFor({ module: name, name: 'default' }),
        capabilities,
        ComponentClass,
    };
    let definition = {
        state,
        manager,
    };
    registry.register('component', name, definition);
    return definition;
}
export function componentHelper(resolver, registry, name) {
    let handle = registry.lookupComponentHandle(name);
    if (handle === null)
        return null;
    let spec = resolver.resolve(handle);
    return curry(spec);
}
//# sourceMappingURL=data:application/json;base64,