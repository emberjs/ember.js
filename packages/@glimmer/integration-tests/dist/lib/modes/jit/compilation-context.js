import { Constants, CompileTimeHeapImpl, RuntimeProgramImpl } from '@glimmer/program';
import { compileStd } from '@glimmer/opcode-compiler';
import { createTemplate } from '../../compile';
export class TestJitCompilationContext {
    constructor(runtimeResolver, registry) {
        this.runtimeResolver = runtimeResolver;
        this.constants = new Constants(this.runtimeResolver);
        this.heap = new CompileTimeHeapImpl();
        this.mode = "jit" /* jit */;
        this.stdlib = compileStd(this);
        this.resolverDelegate = new JitCompileTimeLookup(runtimeResolver, registry);
    }
    program() {
        return new RuntimeProgramImpl(this.constants, this.heap);
    }
}
export default class JitCompileTimeLookup {
    constructor(resolver, registry) {
        this.resolver = resolver;
        this.registry = registry;
    }
    resolve(handle) {
        return this.resolver.resolve(handle);
    }
    getCapabilities(handle) {
        let definition = this.resolver.resolve(handle);
        let { manager, state } = definition;
        return manager.getCapabilities(state);
    }
    lookupHelper(name, referrer) {
        return this.resolver.lookupHelper(name, referrer);
    }
    lookupModifier(name, referrer) {
        return this.resolver.lookupModifier(name, referrer);
    }
    // name is a cache key
    compile(source, name) {
        // throw new Error('NOPE');
        // TODO: This whole thing probably should have a more first-class
        // structure.
        return this.registry.templateFromSource(source, name, source => {
            let factory = createTemplate(source);
            return factory.create();
        });
    }
    lookupComponent(name, referrer) {
        let definitionHandle = this.registry.lookupComponentHandle(name, referrer);
        if (definitionHandle === null) {
            return null;
        }
        let capabilities = this.getCapabilities(definitionHandle);
        if (capabilities.dynamicLayout) {
            return {
                handle: definitionHandle,
                capabilities,
                compilable: null,
            };
        }
        let templateHandle = this.resolver.lookup('template-source', name, null);
        if (templateHandle === null) {
            throw new Error(`missing compile-time layout, but component ${name} didn't have the dynamicLayout capability`);
        }
        let source = this.resolve(templateHandle);
        if (source === null || typeof source !== 'string') {
            throw new Error('UH OH');
        }
        let template = this.compile(source, name);
        let compilable = capabilities.wrapped ? template.asWrappedLayout() : template.asLayout();
        return {
            handle: definitionHandle,
            capabilities,
            compilable,
        };
    }
    lookupPartial(name, referrer) {
        return this.resolver.lookupPartial(name, referrer);
    }
}
//# sourceMappingURL=data:application/json;base64,