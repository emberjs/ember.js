import { dict } from '@glimmer/util';
import { createTemplate } from '../../compile';
export class TypedRegistry {
    constructor() {
        this.byName = dict();
        this.byHandle = dict();
    }
    hasName(name) {
        return name in this.byName;
    }
    getHandle(name) {
        return this.byName[name];
    }
    hasHandle(name) {
        return name in this.byHandle;
    }
    getByHandle(handle) {
        return this.byHandle[handle];
    }
    register(handle, name, value) {
        this.byHandle[handle] = value;
        this.byName[name] = handle;
    }
}
export default class Registry {
    constructor() {
        this.helper = new TypedRegistry();
        this.modifier = new TypedRegistry();
        this.partial = new TypedRegistry();
        this.component = new TypedRegistry();
        this.template = new TypedRegistry();
        this.compilable = new TypedRegistry();
        this['template-source'] = new TypedRegistry();
    }
}
export class TestJitRegistry {
    constructor() {
        this.handleLookup = [];
        this.registry = new Registry();
    }
    register(type, name, value) {
        let registry = this.registry[type];
        let handle = this.handleLookup.length;
        this.handleLookup.push(registry);
        this.registry[type].register(handle, name, value);
        return handle;
    }
    customCompilableTemplate(sourceHandle, templateName, create) {
        let compilableHandle = this.lookup('compilable', templateName);
        if (compilableHandle) {
            return this.resolve(compilableHandle);
        }
        let source = this.resolve(sourceHandle);
        let compilable = create(source);
        this.register('compilable', templateName, compilable);
        return compilable;
    }
    templateFromSource(source, templateName, create) {
        let compilableHandle = this.lookup('compilable', templateName);
        if (compilableHandle) {
            return this.resolve(compilableHandle);
        }
        let template = create(source);
        this.register('compilable', templateName, template);
        return template;
    }
    compileTemplate(sourceHandle, templateName, create) {
        let invocationHandle = this.lookup('template', templateName);
        if (invocationHandle) {
            return this.resolve(invocationHandle);
        }
        let source = this.resolve(sourceHandle);
        let invocation = create(source);
        this.register('template', templateName, invocation);
        return invocation;
    }
    lookup(type, name, _referrer) {
        if (this.registry[type].hasName(name)) {
            return this.registry[type].getHandle(name);
        }
        else {
            return null;
        }
    }
    lookupComponentHandle(name, referrer) {
        return this.lookup('component', name, referrer);
    }
    getCapabilities(handle) {
        let definition = this.resolve(handle);
        let { manager, state } = definition;
        return manager.getCapabilities(state);
    }
    lookupCompileTimeComponent(name, referrer) {
        let definitionHandle = this.lookupComponentHandle(name, referrer);
        if (definitionHandle === null) {
            return null;
        }
        let templateHandle = this.lookup('template-source', name, null);
        if (templateHandle === null) {
            throw new Error('BUG: missing dynamic layout');
        }
        // TODO: This whole thing probably should have a more first-class
        // structure.
        let template = this.customCompilableTemplate(templateHandle, name, source => {
            let factory = createTemplate(source);
            return factory.create();
        });
        return {
            handle: definitionHandle,
            capabilities: this.getCapabilities(definitionHandle),
            compilable: template.asWrappedLayout(),
        };
        // let handle = this.resolver.lookupComponentHandle(name, referrer);
        // if (handle === null) {
        //   return null;
        // }
        // return {
        //   handle,
        //   capabilities: this.getCapabilities(handle),
        //   compilable: this.getLayout(handle),
        // };
    }
    resolve(handle) {
        let registry = this.handleLookup[handle];
        return registry.getByHandle(handle);
    }
}
//# sourceMappingURL=data:application/json;base64,