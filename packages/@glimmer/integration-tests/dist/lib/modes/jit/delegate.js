import { getDynamicVar, JitRuntime, clientBuilder } from '@glimmer/runtime';
import { registerInternalHelper, registerStaticTaglessComponent, registerEmberishCurlyComponent, registerEmberishGlimmerComponent, registerModifier, registerHelper, } from './register';
import { TestMacros } from '../../compile/macros';
import { TestJitCompilationContext } from './compilation-context';
import TestJitRuntimeResolver from './resolver';
import { UpdatableReference } from '@glimmer/reference';
import { renderTemplate } from './render';
export function JitDelegateContext(doc, resolver, registry) {
    registerInternalHelper(registry, '-get-dynamic-var', getDynamicVar);
    let context = new TestJitCompilationContext(resolver, registry);
    let runtime = JitRuntime(doc, context.program(), resolver);
    let syntax = { program: context, macros: new TestMacros() };
    return { runtime, syntax };
}
export class JitRenderDelegate {
    constructor(doc = document) {
        this.doc = doc;
        this.resolver = new TestJitRuntimeResolver();
        this.registry = this.resolver.registry;
        this.self = null;
        this.context = this.getContext();
    }
    getContext() {
        return JitDelegateContext(this.doc, this.resolver, this.registry);
    }
    getInitialElement() {
        if (isBrowserTestDocument(this.doc)) {
            return this.doc.getElementById('qunit-fixture');
        }
        else {
            return this.createElement('div');
        }
    }
    createElement(tagName) {
        return this.doc.createElement(tagName);
    }
    registerComponent(type, _testType, name, layout, Class) {
        switch (type) {
            case 'Basic':
            case 'Fragment':
                return registerStaticTaglessComponent(this.registry, name, Class, layout);
            case 'Curly':
            case 'Dynamic':
                return registerEmberishCurlyComponent(this.registry, name, Class, layout);
            case 'Glimmer':
                return registerEmberishGlimmerComponent(this.registry, name, Class, layout);
        }
    }
    registerModifier(name, ModifierClass) {
        registerModifier(this.registry, name, ModifierClass);
    }
    registerHelper(name, helper) {
        registerHelper(this.registry, name, helper);
    }
    getElementBuilder(env, cursor) {
        return clientBuilder(env, cursor);
    }
    getSelf(context) {
        if (!this.self) {
            this.self = new UpdatableReference(context);
        }
        return this.self;
    }
    renderTemplate(template, context, element) {
        let cursor = { element, nextSibling: null };
        return renderTemplate(template, this.context, this.getSelf(context), this.getElementBuilder(this.context.runtime.env, cursor));
    }
}
JitRenderDelegate.isEager = false;
JitRenderDelegate.style = 'jit';
function isBrowserTestDocument(doc) {
    return !!(doc.getElementById && doc.getElementById('qunit-fixture'));
}
//# sourceMappingURL=data:application/json;base64,