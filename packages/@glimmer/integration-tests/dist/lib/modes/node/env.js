import createHTMLDocument from '@simple-dom/document';
import { JitRenderDelegate } from '../jit/delegate';
import { AotRenderDelegate } from '../aot/delegate';
import { RenderTest } from '../../render-test';
import { toInnerHTML, assertElement } from '../../dom/simple-utils';
export class NodeJitRenderDelegate extends JitRenderDelegate {
    constructor() {
        super(createHTMLDocument());
    }
}
NodeJitRenderDelegate.style = 'node jit';
export class NodeAotRenderDelegate extends AotRenderDelegate {
    constructor() {
        super(createHTMLDocument());
    }
}
NodeAotRenderDelegate.style = 'node aot';
export class AbstractNodeTest extends RenderTest {
    constructor(delegate) {
        super(delegate);
    }
    assertHTML(html) {
        let serialized = toInnerHTML(this.element);
        this.assert.equal(serialized, html);
    }
    assertComponent(html) {
        let el = assertElement(this.element.firstChild);
        if (this.testType !== 'Glimmer') {
            this.assert.equal(el.getAttribute('class'), 'ember-view');
            this.assert.ok(el.getAttribute('id'));
            this.assert.ok(el.getAttribute('id').indexOf('ember') > -1);
        }
        let serialized = toInnerHTML(el);
        this.assert.equal(serialized, html);
    }
}
export class NodeRenderDelegate extends AotRenderDelegate {
    constructor(doc = createHTMLDocument()) {
        super(doc);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL21vZGVzL25vZGUvZW52LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sa0JBQWtCLE1BQU0sc0JBQXNCLENBQUM7QUFFdEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFRcEUsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGlCQUFpQjtJQUcxRDtRQUNFLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7QUFKTSwyQkFBSyxHQUFHLFVBQVUsQ0FBQztBQU81QixNQUFNLE9BQU8scUJBQXNCLFNBQVEsaUJBQWlCO0lBRzFEO1FBQ0UsS0FBSyxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztJQUM5QixDQUFDOztBQUpNLDJCQUFLLEdBQUcsVUFBVSxDQUFDO0FBTzVCLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxVQUFVO0lBQzlDLFlBQVksUUFBd0I7UUFDbEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBWTtRQUNyQixJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsZUFBZSxDQUFDLElBQVk7UUFDMUIsSUFBSSxFQUFFLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFaEQsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQzFELElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBRUQsSUFBSSxVQUFVLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsaUJBQWlCO0lBQ3ZELFlBQVksTUFBc0Isa0JBQWtCLEVBQUU7UUFDcEQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2xpbW1lclRyZWVDaGFuZ2VzLCBHbGltbWVyVHJlZUNvbnN0cnVjdGlvbiB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IGNyZWF0ZUhUTUxEb2N1bWVudCBmcm9tICdAc2ltcGxlLWRvbS9kb2N1bWVudCc7XG5pbXBvcnQgeyBTaW1wbGVEb2N1bWVudCB9IGZyb20gJ0BzaW1wbGUtZG9tL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBKaXRSZW5kZXJEZWxlZ2F0ZSB9IGZyb20gJy4uL2ppdC9kZWxlZ2F0ZSc7XG5pbXBvcnQgeyBBb3RSZW5kZXJEZWxlZ2F0ZSB9IGZyb20gJy4uL2FvdC9kZWxlZ2F0ZSc7XG5pbXBvcnQgeyBSZW5kZXJUZXN0IH0gZnJvbSAnLi4vLi4vcmVuZGVyLXRlc3QnO1xuaW1wb3J0IFJlbmRlckRlbGVnYXRlIGZyb20gJy4uLy4uL3JlbmRlci1kZWxlZ2F0ZSc7XG5pbXBvcnQgeyB0b0lubmVySFRNTCwgYXNzZXJ0RWxlbWVudCB9IGZyb20gJy4uLy4uL2RvbS9zaW1wbGUtdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE5vZGVFbnZpcm9ubWVudE9wdGlvbnMge1xuICBkb2N1bWVudDogU2ltcGxlRG9jdW1lbnQ7XG4gIGFwcGVuZE9wZXJhdGlvbnM/OiBHbGltbWVyVHJlZUNvbnN0cnVjdGlvbjtcbiAgdXBkYXRlT3BlcmF0aW9ucz86IEdsaW1tZXJUcmVlQ2hhbmdlcztcbn1cblxuZXhwb3J0IGNsYXNzIE5vZGVKaXRSZW5kZXJEZWxlZ2F0ZSBleHRlbmRzIEppdFJlbmRlckRlbGVnYXRlIHtcbiAgc3RhdGljIHN0eWxlID0gJ25vZGUgaml0JztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihjcmVhdGVIVE1MRG9jdW1lbnQoKSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5vZGVBb3RSZW5kZXJEZWxlZ2F0ZSBleHRlbmRzIEFvdFJlbmRlckRlbGVnYXRlIHtcbiAgc3RhdGljIHN0eWxlID0gJ25vZGUgYW90JztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihjcmVhdGVIVE1MRG9jdW1lbnQoKSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFic3RyYWN0Tm9kZVRlc3QgZXh0ZW5kcyBSZW5kZXJUZXN0IHtcbiAgY29uc3RydWN0b3IoZGVsZWdhdGU6IFJlbmRlckRlbGVnYXRlKSB7XG4gICAgc3VwZXIoZGVsZWdhdGUpO1xuICB9XG5cbiAgYXNzZXJ0SFRNTChodG1sOiBzdHJpbmcpIHtcbiAgICBsZXQgc2VyaWFsaXplZCA9IHRvSW5uZXJIVE1MKHRoaXMuZWxlbWVudCk7XG4gICAgdGhpcy5hc3NlcnQuZXF1YWwoc2VyaWFsaXplZCwgaHRtbCk7XG4gIH1cblxuICBhc3NlcnRDb21wb25lbnQoaHRtbDogc3RyaW5nKSB7XG4gICAgbGV0IGVsID0gYXNzZXJ0RWxlbWVudCh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cbiAgICBpZiAodGhpcy50ZXN0VHlwZSAhPT0gJ0dsaW1tZXInKSB7XG4gICAgICB0aGlzLmFzc2VydC5lcXVhbChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyksICdlbWJlci12aWV3Jyk7XG4gICAgICB0aGlzLmFzc2VydC5vayhlbC5nZXRBdHRyaWJ1dGUoJ2lkJykpO1xuICAgICAgdGhpcy5hc3NlcnQub2soZWwuZ2V0QXR0cmlidXRlKCdpZCcpIS5pbmRleE9mKCdlbWJlcicpID4gLTEpO1xuICAgIH1cblxuICAgIGxldCBzZXJpYWxpemVkID0gdG9Jbm5lckhUTUwoZWwpO1xuICAgIHRoaXMuYXNzZXJ0LmVxdWFsKHNlcmlhbGl6ZWQsIGh0bWwpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOb2RlUmVuZGVyRGVsZWdhdGUgZXh0ZW5kcyBBb3RSZW5kZXJEZWxlZ2F0ZSB7XG4gIGNvbnN0cnVjdG9yKGRvYzogU2ltcGxlRG9jdW1lbnQgPSBjcmVhdGVIVE1MRG9jdW1lbnQoKSkge1xuICAgIHN1cGVyKGRvYyk7XG4gIH1cbn1cbiJdfQ==