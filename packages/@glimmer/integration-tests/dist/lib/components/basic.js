import { unreachable, templateMeta, expect } from '@glimmer/util';
import { UpdatableReference, CONSTANT_TAG } from '@glimmer/reference';
export class BasicComponent {
}
export class BasicComponentManager {
    getCapabilities(state) {
        return state.capabilities;
    }
    prepareArgs() {
        throw unreachable();
    }
    create(_env, definition) {
        let klass = definition.ComponentClass || BasicComponent;
        return new klass();
    }
    getJitStaticLayout(state, resolver) {
        return resolver.compilable(templateMeta(state.locator)).asLayout();
    }
    getAotStaticLayout(state, resolver) {
        // For the case of dynamically invoking (via `{{component}}`) in eager
        // mode, we need to exchange the module locator for the handle to the
        // compiled layout (which was provided at bundle compilation time and
        // stashed in the component definition state).
        let locator = expect(state.locator, 'component definition state should include module locator');
        return resolver.getInvocation(templateMeta(locator));
    }
    getSelf(component) {
        return new UpdatableReference(component);
    }
    getTag() {
        return CONSTANT_TAG;
    }
    didCreateElement(component, element) {
        component.element = element;
    }
    didRenderLayout(component, bounds) {
        component.bounds = bounds;
    }
    didCreate() { }
    update() { }
    didUpdateLayout() { }
    didUpdate() { }
    getDestructor() {
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY29tcG9uZW50cy9iYXNpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFZQSxPQUFPLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEUsT0FBTyxFQUEwQixrQkFBa0IsRUFBTyxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQU1uRyxNQUFNLE9BQU8sY0FBYztDQUcxQjtBQUVELE1BQU0sT0FBTyxxQkFBcUI7SUFJaEMsZUFBZSxDQUFDLEtBQW1DO1FBQ2pELE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQztJQUM1QixDQUFDO0lBRUQsV0FBVztRQUNULE1BQU0sV0FBVyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFpQixFQUFFLFVBQXdDO1FBQ2hFLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQyxjQUFjLElBQUksY0FBYyxDQUFDO1FBQ3hELE9BQU8sSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsa0JBQWtCLENBQ2hCLEtBQW1DLEVBQ25DLFFBQTRCO1FBRTVCLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDckUsQ0FBQztJQUVELGtCQUFrQixDQUNoQixLQUFtQyxFQUNuQyxRQUE0QjtRQUU1QixzRUFBc0U7UUFDdEUscUVBQXFFO1FBQ3JFLHFFQUFxRTtRQUNyRSw4Q0FBOEM7UUFDOUMsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsMERBQTBELENBQUMsQ0FBQztRQUNoRyxPQUFPLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELE9BQU8sQ0FBQyxTQUF5QjtRQUMvQixPQUFPLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELE1BQU07UUFDSixPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsU0FBeUIsRUFBRSxPQUFnQjtRQUMxRCxTQUFTLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUM5QixDQUFDO0lBRUQsZUFBZSxDQUFDLFNBQXlCLEVBQUUsTUFBYztRQUN2RCxTQUFTLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUM1QixDQUFDO0lBRUQsU0FBUyxLQUFVLENBQUM7SUFFcEIsTUFBTSxLQUFVLENBQUM7SUFFakIsZUFBZSxLQUFVLENBQUM7SUFFMUIsU0FBUyxLQUFVLENBQUM7SUFFcEIsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQm91bmRzLFxuICBXaXRoSml0U3RhdGljTGF5b3V0LFxuICBXaXRoQW90U3RhdGljTGF5b3V0LFxuICBBb3RSdW50aW1lUmVzb2x2ZXIsXG4gIEppdFJ1bnRpbWVSZXNvbHZlcixcbiAgRW52aXJvbm1lbnQsXG4gIENvbXBpbGFibGVQcm9ncmFtLFxuICBJbnZvY2F0aW9uLFxuICBDb21wb25lbnRDYXBhYmlsaXRpZXMsXG59IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgVGVzdENvbXBvbmVudERlZmluaXRpb25TdGF0ZSB9IGZyb20gJy4vdGVzdC1jb21wb25lbnQnO1xuaW1wb3J0IHsgdW5yZWFjaGFibGUsIHRlbXBsYXRlTWV0YSwgZXhwZWN0IH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgeyBWZXJzaW9uZWRQYXRoUmVmZXJlbmNlLCBVcGRhdGFibGVSZWZlcmVuY2UsIFRhZywgQ09OU1RBTlRfVEFHIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcblxuZXhwb3J0IGludGVyZmFjZSBCYXNpY0NvbXBvbmVudEZhY3Rvcnkge1xuICBuZXcgKCk6IEJhc2ljQ29tcG9uZW50O1xufVxuXG5leHBvcnQgY2xhc3MgQmFzaWNDb21wb25lbnQge1xuICBwdWJsaWMgZWxlbWVudCE6IEVsZW1lbnQ7XG4gIHB1YmxpYyBib3VuZHMhOiBCb3VuZHM7XG59XG5cbmV4cG9ydCBjbGFzcyBCYXNpY0NvbXBvbmVudE1hbmFnZXJcbiAgaW1wbGVtZW50c1xuICAgIFdpdGhKaXRTdGF0aWNMYXlvdXQ8QmFzaWNDb21wb25lbnQsIFRlc3RDb21wb25lbnREZWZpbml0aW9uU3RhdGUsIEppdFJ1bnRpbWVSZXNvbHZlcj4sXG4gICAgV2l0aEFvdFN0YXRpY0xheW91dDxCYXNpY0NvbXBvbmVudCwgVGVzdENvbXBvbmVudERlZmluaXRpb25TdGF0ZSwgQW90UnVudGltZVJlc29sdmVyPiB7XG4gIGdldENhcGFiaWxpdGllcyhzdGF0ZTogVGVzdENvbXBvbmVudERlZmluaXRpb25TdGF0ZSk6IENvbXBvbmVudENhcGFiaWxpdGllcyB7XG4gICAgcmV0dXJuIHN0YXRlLmNhcGFiaWxpdGllcztcbiAgfVxuXG4gIHByZXBhcmVBcmdzKCk6IG51bGwge1xuICAgIHRocm93IHVucmVhY2hhYmxlKCk7XG4gIH1cblxuICBjcmVhdGUoX2VudjogRW52aXJvbm1lbnQsIGRlZmluaXRpb246IFRlc3RDb21wb25lbnREZWZpbml0aW9uU3RhdGUpOiBCYXNpY0NvbXBvbmVudCB7XG4gICAgbGV0IGtsYXNzID0gZGVmaW5pdGlvbi5Db21wb25lbnRDbGFzcyB8fCBCYXNpY0NvbXBvbmVudDtcbiAgICByZXR1cm4gbmV3IGtsYXNzKCk7XG4gIH1cblxuICBnZXRKaXRTdGF0aWNMYXlvdXQoXG4gICAgc3RhdGU6IFRlc3RDb21wb25lbnREZWZpbml0aW9uU3RhdGUsXG4gICAgcmVzb2x2ZXI6IEppdFJ1bnRpbWVSZXNvbHZlclxuICApOiBDb21waWxhYmxlUHJvZ3JhbSB7XG4gICAgcmV0dXJuIHJlc29sdmVyLmNvbXBpbGFibGUodGVtcGxhdGVNZXRhKHN0YXRlLmxvY2F0b3IpKS5hc0xheW91dCgpO1xuICB9XG5cbiAgZ2V0QW90U3RhdGljTGF5b3V0KFxuICAgIHN0YXRlOiBUZXN0Q29tcG9uZW50RGVmaW5pdGlvblN0YXRlLFxuICAgIHJlc29sdmVyOiBBb3RSdW50aW1lUmVzb2x2ZXJcbiAgKTogSW52b2NhdGlvbiB7XG4gICAgLy8gRm9yIHRoZSBjYXNlIG9mIGR5bmFtaWNhbGx5IGludm9raW5nICh2aWEgYHt7Y29tcG9uZW50fX1gKSBpbiBlYWdlclxuICAgIC8vIG1vZGUsIHdlIG5lZWQgdG8gZXhjaGFuZ2UgdGhlIG1vZHVsZSBsb2NhdG9yIGZvciB0aGUgaGFuZGxlIHRvIHRoZVxuICAgIC8vIGNvbXBpbGVkIGxheW91dCAod2hpY2ggd2FzIHByb3ZpZGVkIGF0IGJ1bmRsZSBjb21waWxhdGlvbiB0aW1lIGFuZFxuICAgIC8vIHN0YXNoZWQgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uIHN0YXRlKS5cbiAgICBsZXQgbG9jYXRvciA9IGV4cGVjdChzdGF0ZS5sb2NhdG9yLCAnY29tcG9uZW50IGRlZmluaXRpb24gc3RhdGUgc2hvdWxkIGluY2x1ZGUgbW9kdWxlIGxvY2F0b3InKTtcbiAgICByZXR1cm4gcmVzb2x2ZXIuZ2V0SW52b2NhdGlvbih0ZW1wbGF0ZU1ldGEobG9jYXRvcikpO1xuICB9XG5cbiAgZ2V0U2VsZihjb21wb25lbnQ6IEJhc2ljQ29tcG9uZW50KTogVmVyc2lvbmVkUGF0aFJlZmVyZW5jZSB7XG4gICAgcmV0dXJuIG5ldyBVcGRhdGFibGVSZWZlcmVuY2UoY29tcG9uZW50KTtcbiAgfVxuXG4gIGdldFRhZygpOiBUYWcge1xuICAgIHJldHVybiBDT05TVEFOVF9UQUc7XG4gIH1cblxuICBkaWRDcmVhdGVFbGVtZW50KGNvbXBvbmVudDogQmFzaWNDb21wb25lbnQsIGVsZW1lbnQ6IEVsZW1lbnQpOiB2b2lkIHtcbiAgICBjb21wb25lbnQuZWxlbWVudCA9IGVsZW1lbnQ7XG4gIH1cblxuICBkaWRSZW5kZXJMYXlvdXQoY29tcG9uZW50OiBCYXNpY0NvbXBvbmVudCwgYm91bmRzOiBCb3VuZHMpOiB2b2lkIHtcbiAgICBjb21wb25lbnQuYm91bmRzID0gYm91bmRzO1xuICB9XG5cbiAgZGlkQ3JlYXRlKCk6IHZvaWQge31cblxuICB1cGRhdGUoKTogdm9pZCB7fVxuXG4gIGRpZFVwZGF0ZUxheW91dCgpOiB2b2lkIHt9XG5cbiAgZGlkVXBkYXRlKCk6IHZvaWQge31cblxuICBnZXREZXN0cnVjdG9yKCk6IG51bGwge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iXX0=