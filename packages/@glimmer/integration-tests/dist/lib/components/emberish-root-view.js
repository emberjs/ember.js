import { preprocess } from '../compile';
import { assertElement, firstElementChild } from '../dom/simple-utils';
import { UpdatableReference } from '@glimmer/reference';
import { renderJitMain, clientBuilder } from '@glimmer/runtime';
import { assign } from '@glimmer/util';
export class EmberishRootView {
    constructor(runtime, syntax, template, state) {
        this.runtime = runtime;
        this.syntax = syntax;
        this.element = null;
        this.template = preprocess(template);
        assign(this, state);
    }
    appendTo(selector) {
        let element = assertElement(document.querySelector(selector));
        let self = new UpdatableReference(this);
        let cursor = { element, nextSibling: null };
        let templateIterator = renderJitMain(this.runtime, this.syntax, self, clientBuilder(this.runtime.env, cursor), this.template.asLayout().compile(this.syntax));
        let result;
        do {
            result = templateIterator.next();
        } while (!result.done);
        this.element = firstElementChild(element);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iZXJpc2gtcm9vdC12aWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NvbXBvbmVudHMvZW1iZXJpc2gtcm9vdC12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFReEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFaEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2QyxNQUFNLE9BQU8sZ0JBQWdCO0lBSTNCLFlBQ1UsT0FBd0MsRUFDeEMsTUFBZ0MsRUFDeEMsUUFBZ0IsRUFDaEIsS0FBYztRQUhOLFlBQU8sR0FBUCxPQUFPLENBQWlDO1FBQ3hDLFdBQU0sR0FBTixNQUFNLENBQTBCO1FBSm5DLFlBQU8sR0FBMEIsSUFBSSxDQUFDO1FBUTNDLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELFFBQVEsQ0FBQyxRQUFnQjtRQUN2QixJQUFJLE9BQU8sR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQWtCLENBQUMsQ0FBQztRQUMvRSxJQUFJLElBQUksR0FBRyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksTUFBTSxHQUFHLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUU1QyxJQUFJLGdCQUFnQixHQUFHLGFBQWEsQ0FDbEMsSUFBSSxDQUFDLE9BQU8sRUFDWixJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksRUFDSixhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEVBQ3ZDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FDOUMsQ0FBQztRQUNGLElBQUksTUFBTSxDQUFDO1FBQ1gsR0FBRztZQUNELE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNsQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtRQUV2QixJQUFJLENBQUMsT0FBTyxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBRSxDQUFDO0lBQzdDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByZXByb2Nlc3MgfSBmcm9tICcuLi9jb21waWxlJztcbmltcG9ydCB7XG4gIEppdFJ1bnRpbWVDb250ZXh0LFxuICBTeW50YXhDb21waWxhdGlvbkNvbnRleHQsXG4gIFRlbXBsYXRlLFxuICBPcHRpb24sXG4gIFRlbXBsYXRlTWV0YSxcbn0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBhc3NlcnRFbGVtZW50LCBmaXJzdEVsZW1lbnRDaGlsZCB9IGZyb20gJy4uL2RvbS9zaW1wbGUtdXRpbHMnO1xuaW1wb3J0IHsgVXBkYXRhYmxlUmVmZXJlbmNlIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IHJlbmRlckppdE1haW4sIGNsaWVudEJ1aWxkZXIgfSBmcm9tICdAZ2xpbW1lci9ydW50aW1lJztcbmltcG9ydCB7IFNpbXBsZUVsZW1lbnQgfSBmcm9tICdAc2ltcGxlLWRvbS9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBFbWJlcmlzaFJvb3RWaWV3IHtcbiAgcHJpdmF0ZSB0ZW1wbGF0ZTogVGVtcGxhdGU7XG4gIHB1YmxpYyBlbGVtZW50OiBPcHRpb248U2ltcGxlRWxlbWVudD4gPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcnVudGltZTogSml0UnVudGltZUNvbnRleHQ8VGVtcGxhdGVNZXRhPixcbiAgICBwcml2YXRlIHN5bnRheDogU3ludGF4Q29tcGlsYXRpb25Db250ZXh0LFxuICAgIHRlbXBsYXRlOiBzdHJpbmcsXG4gICAgc3RhdGU/OiBPYmplY3RcbiAgKSB7XG4gICAgdGhpcy50ZW1wbGF0ZSA9IHByZXByb2Nlc3ModGVtcGxhdGUpO1xuICAgIGFzc2lnbih0aGlzLCBzdGF0ZSk7XG4gIH1cblxuICBhcHBlbmRUbyhzZWxlY3Rvcjogc3RyaW5nKSB7XG4gICAgbGV0IGVsZW1lbnQgPSBhc3NlcnRFbGVtZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIGFzIFNpbXBsZUVsZW1lbnQpO1xuICAgIGxldCBzZWxmID0gbmV3IFVwZGF0YWJsZVJlZmVyZW5jZSh0aGlzKTtcbiAgICBsZXQgY3Vyc29yID0geyBlbGVtZW50LCBuZXh0U2libGluZzogbnVsbCB9O1xuXG4gICAgbGV0IHRlbXBsYXRlSXRlcmF0b3IgPSByZW5kZXJKaXRNYWluKFxuICAgICAgdGhpcy5ydW50aW1lLFxuICAgICAgdGhpcy5zeW50YXgsXG4gICAgICBzZWxmLFxuICAgICAgY2xpZW50QnVpbGRlcih0aGlzLnJ1bnRpbWUuZW52LCBjdXJzb3IpLFxuICAgICAgdGhpcy50ZW1wbGF0ZS5hc0xheW91dCgpLmNvbXBpbGUodGhpcy5zeW50YXgpXG4gICAgKTtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGRvIHtcbiAgICAgIHJlc3VsdCA9IHRlbXBsYXRlSXRlcmF0b3IubmV4dCgpO1xuICAgIH0gd2hpbGUgKCFyZXN1bHQuZG9uZSk7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBmaXJzdEVsZW1lbnRDaGlsZChlbGVtZW50KSE7XG4gIH1cbn1cbiJdfQ==