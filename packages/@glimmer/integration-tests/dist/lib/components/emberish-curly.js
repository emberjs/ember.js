import { DirtyableTag, combine, UpdatableReference, } from '@glimmer/reference';
import { keys, templateMeta, EMPTY_ARRAY, assign } from '@glimmer/util';
import { PrimitiveReference } from '@glimmer/runtime';
let GUID = 1;
export class EmberishCurlyComponent {
    constructor() {
        this.dirtinessTag = DirtyableTag.create();
        this.tagName = null;
        this.attributeBindings = null;
        this.parentView = null;
        this._guid = `${GUID++}`;
    }
    static create(args) {
        let c = new this();
        for (let key of keys(args)) {
            c[key] = args[key];
        }
        return c;
    }
    set(key, value) {
        this[key] = value;
    }
    setProperties(dict) {
        for (let key of keys(dict)) {
            this[key] = dict[key];
        }
        SELF_REF.get(this).dirty();
        this.dirtinessTag.inner.dirty();
    }
    recompute() {
        this.dirtinessTag.inner.dirty();
    }
    destroy() { }
    didInitAttrs(_options) { }
    didUpdateAttrs(_diff) { }
    didReceiveAttrs(_diff) { }
    willInsertElement() { }
    willUpdate() { }
    willRender() { }
    didInsertElement() { }
    didUpdate() { }
    didRender() { }
}
EmberishCurlyComponent.positionalParams = [];
const SELF_REF = new WeakMap();
export class EmberishCurlyComponentManager {
    getCapabilities(state) {
        return state.capabilities;
    }
    getAotStaticLayout(state, resolver) {
        return resolver.getInvocation(templateMeta(state.locator));
    }
    getJitDynamicLayout({ layout }, resolver, { program: { resolverDelegate } }) {
        if (!layout) {
            throw new Error('BUG: missing dynamic layout');
        }
        // TODO: What's going on with this weird resolve?
        let source = resolver.resolve(layout.handle);
        if (source === null) {
            throw new Error(`BUG: Missing dynamic layout for ${layout.name}`);
        }
        return resolverDelegate.compile(source, layout.name);
    }
    prepareArgs(state, args) {
        const { positionalParams } = state.ComponentClass || EmberishCurlyComponent;
        if (typeof positionalParams === 'string') {
            if (args.named.has(positionalParams)) {
                if (args.positional.length === 0) {
                    return null;
                }
                else {
                    throw new Error(`You cannot specify positional parameters and the hash argument \`${positionalParams}\`.`);
                }
            }
            let named = assign({}, args.named.capture().map);
            named[positionalParams] = args.positional.capture();
            return { positional: EMPTY_ARRAY, named };
        }
        else if (Array.isArray(positionalParams)) {
            let named = assign({}, args.named.capture().map);
            let count = Math.min(positionalParams.length, args.positional.length);
            for (let i = 0; i < count; i++) {
                let name = positionalParams[i];
                if (named[name]) {
                    throw new Error(`You cannot specify both a positional param (at position ${i}) and the hash argument \`${name}\`.`);
                }
                named[name] = args.positional.at(i);
            }
            return { positional: EMPTY_ARRAY, named };
        }
        else {
            return null;
        }
    }
    create(_environment, state, _args, dynamicScope, callerSelf, hasDefaultBlock) {
        let klass = state.ComponentClass || EmberishCurlyComponent;
        let self = callerSelf.value();
        let args = _args.named.capture();
        let attrs = args.value();
        let merged = assign({}, attrs, { attrs }, { args }, { targetObject: self }, { HAS_BLOCK: hasDefaultBlock });
        let component = klass.create(merged);
        component.name = state.name;
        component.args = args;
        if (state.layout !== null) {
            component.layout = { name: component.name, handle: state.layout };
        }
        let dyn = state.ComponentClass
            ? state.ComponentClass['fromDynamicScope'] || null
            : null;
        if (dyn) {
            for (let i = 0; i < dyn.length; i++) {
                let name = dyn[i];
                component.set(name, dynamicScope.get(name).value());
            }
        }
        component.didInitAttrs({ attrs });
        component.didReceiveAttrs({ oldAttrs: null, newAttrs: attrs });
        component.willInsertElement();
        component.willRender();
        return component;
    }
    getTag({ args: { tag }, dirtinessTag }) {
        return combine([tag, dirtinessTag]);
    }
    getSelf(component) {
        let ref = new UpdatableReference(component);
        SELF_REF.set(component, ref);
        return ref;
    }
    getTagName({ tagName }) {
        if (tagName) {
            return tagName;
        }
        else if (tagName === null) {
            return 'div';
        }
        else {
            return null;
        }
    }
    didCreateElement(component, element, operations) {
        component.element = element;
        operations.setAttribute('id', PrimitiveReference.create(`ember${component._guid}`), false, null);
        operations.setAttribute('class', PrimitiveReference.create('ember-view'), false, null);
        let bindings = component.attributeBindings;
        let rootRef = SELF_REF.get(component);
        if (bindings) {
            for (let i = 0; i < bindings.length; i++) {
                let attribute = bindings[i];
                let reference = rootRef.get(attribute);
                operations.setAttribute(attribute, reference, false, null);
            }
        }
    }
    didRenderLayout(component, bounds) {
        component.bounds = bounds;
    }
    didCreate(component) {
        component.didInsertElement();
        component.didRender();
    }
    update(component) {
        let oldAttrs = component.attrs;
        let newAttrs = component.args.value();
        let merged = assign({}, newAttrs, { attrs: newAttrs });
        component.setProperties(merged);
        component.didUpdateAttrs({ oldAttrs, newAttrs });
        component.didReceiveAttrs({ oldAttrs, newAttrs });
        component.willUpdate();
        component.willRender();
    }
    didUpdateLayout() { }
    didUpdate(component) {
        component.didUpdate();
        component.didRender();
    }
    getDestructor(component) {
        return {
            destroy() {
                component.destroy();
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,