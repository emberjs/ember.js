import { combine, UpdatableReference, UpdatableDirtyableTag, } from '@glimmer/reference';
import { keys, templateMeta, assign } from '@glimmer/util';
import { BASIC_CAPABILITIES } from './capabilities';
const SELF_REF = new WeakMap();
function getSelf(obj) {
    if (SELF_REF.has(obj)) {
        return SELF_REF.get(obj);
    }
    else {
        let ref = new UpdatableReference(obj);
        SELF_REF.set(obj, ref);
        return ref;
    }
}
export class EmberishGlimmerComponent {
    constructor(_args) {
        this.dirtinessTag = UpdatableDirtyableTag.create();
        this.parentView = null;
    }
    static create({ attrs: args }) {
        let c = new this({ attrs: args });
        for (let key of keys(args)) {
            c[key] = args[key];
        }
        return c;
    }
    recompute() {
        getSelf(this).dirty();
    }
    destroy() { }
    didInitAttrs(_options) { }
    didUpdateAttrs(_diff) { }
    didReceiveAttrs(_diff) { }
    willInsertElement() { }
    willUpdate() { }
    willRender() { }
    didInsertElement() { }
    didUpdate() { }
    didRender() { }
}
export const EMBERISH_GLIMMER_CAPABILITIES = assign({}, BASIC_CAPABILITIES, {
    dynamicTag: true,
    createArgs: true,
    attributeHook: true,
    updateHook: true,
    createInstance: true,
});
export class EmberishGlimmerComponentManager {
    getCapabilities(state) {
        return state.capabilities;
    }
    prepareArgs() {
        return null;
    }
    create(_environment, definition, _args, _dynamicScope, _callerSelf, _hasDefaultBlock) {
        let args = _args.named.capture();
        let klass = definition.ComponentClass || EmberishGlimmerComponent;
        let attrs = args.value();
        let component = klass.create({ attrs });
        component.didInitAttrs({ attrs });
        component.didReceiveAttrs({ oldAttrs: null, newAttrs: attrs });
        component.willInsertElement();
        component.willRender();
        return { args, component };
    }
    getTag({ args: { tag }, component }) {
        return combine([tag, getSelf(component).tag]);
    }
    getJitStaticLayout(state, resolver) {
        return resolver.compilable(templateMeta(state.locator)).asLayout();
    }
    getAotStaticLayout(state, resolver) {
        let { locator } = state;
        return resolver.getInvocation(templateMeta(locator.meta.locator));
    }
    getSelf({ component }) {
        return getSelf(component);
    }
    didCreateElement() { }
    didRenderLayout({ component }, bounds) {
        component.bounds = bounds;
    }
    didCreate({ component }) {
        component.didInsertElement();
        component.didRender();
    }
    update({ args, component }) {
        let oldAttrs = component.attrs;
        let newAttrs = args.value();
        component.attrs = newAttrs;
        component.didUpdateAttrs({ oldAttrs, newAttrs });
        component.didReceiveAttrs({ oldAttrs, newAttrs });
        component.willUpdate();
        component.willRender();
    }
    didUpdateLayout() { }
    didUpdate({ component }) {
        component.didUpdate();
        component.didRender();
    }
    getDestructor({ component }) {
        return {
            destroy() {
                component.destroy();
            },
        };
    }
}
export function inspectHooks(ComponentClass) {
    return class extends ComponentClass {
        constructor() {
            super();
            this.hooks = {
                didInitAttrs: 0,
                didUpdateAttrs: 0,
                didReceiveAttrs: 0,
                willInsertElement: 0,
                willUpdate: 0,
                willRender: 0,
                didInsertElement: 0,
                didUpdate: 0,
                didRender: 0,
            };
        }
        didInitAttrs() {
            super.didInitAttrs(...arguments);
            this.hooks['didInitAttrs']++;
        }
        didUpdateAttrs() {
            super.didUpdateAttrs(...arguments);
            this.hooks['didUpdateAttrs']++;
        }
        didReceiveAttrs() {
            super.didReceiveAttrs(...arguments);
            this.hooks['didReceiveAttrs']++;
        }
        willInsertElement() {
            super.willInsertElement(...arguments);
            this.hooks['willInsertElement']++;
        }
        willUpdate() {
            super.willUpdate(...arguments);
            this.hooks['willUpdate']++;
        }
        willRender() {
            super.willRender(...arguments);
            this.hooks['willRender']++;
        }
        didInsertElement() {
            super.didInsertElement(...arguments);
            this.hooks['didInsertElement']++;
        }
        didUpdate() {
            super.didUpdate(...arguments);
            this.hooks['didUpdate']++;
        }
        didRender() {
            super.didRender(...arguments);
            this.hooks['didRender']++;
        }
    };
}
//# sourceMappingURL=data:application/json;base64,